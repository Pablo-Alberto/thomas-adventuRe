<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thomas’ adventuRe</title>
    <link>/</link>
    <description>Recent content on Thomas’ adventuRe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 14 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>This is just a test</title>
      <link>/posts/this-is-just-a-test/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/this-is-just-a-test/</guid>
      <description>knitr::opts_chunk$set(dev = &amp;#34;svglite&amp;#34;)library(ggcharts)## Loading required package: ggplot2bar_chart(diamonds, cut)</description>
    </item>
    
    <item>
      <title>Enhance your {ggplot2} data visualizations with {ggtext}</title>
      <link>/posts/enhance-ggplot2-with-ggtext/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/enhance-ggplot2-with-ggtext/</guid>
      <description>I am super exciting to share with you my recent &amp;ldquo;discovery&amp;rdquo; of the {ggtext} R package.
I had looked for a solution to color individual words in the title of a {ggplot2} data visualization and {ggtext} provided me with a great solution for doing just that (and more).
So, how does it work? Have a look at this example:
library(ggplot2)library(dplyr)data(biomedicalrevenue, package = &amp;#34;ggcharts&amp;#34;)plot &amp;lt;- biomedicalrevenue %&amp;gt;%filter(company %in% c(&amp;#34;Roche&amp;#34;, &amp;#34;Novartis&amp;#34;)) %&amp;gt;%ggplot(aes(year, revenue, color = company)) +geom_line(size = 1.</description>
    </item>
    
    <item>
      <title>{ggcharts 0.2.0} is on CRAN</title>
      <link>/posts/ggcharts-0-2-0-is-on-cran/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-0-2-0-is-on-cran/</guid>
      <description>Introduction A week ago the second release of my {ggcharts} package was published on CRAN. {ggcharts} aims to get you to your desired plot faster. It provides a high-level interface for creating common plots using {ggplot2} and does the heavy lifting for you. The resulting plots are ggplot objects so you can further tweak them using any {ggplot2} function.
Major new feature: themes The major focus of version 0.2.0 was adding themes to the package.</description>
    </item>
    
    <item>
      <title>Analyzing the ggcharts CRAN Downloads. Part 2: Data Visualization</title>
      <link>/posts/ggcharts-cran-downloads-part-2/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-cran-downloads-part-2/</guid>
      <description>Introduction In part 1 of this post I described how I got data about the ggcharts CRAN downloads. In this follow-up post I will walk you through how to turn this data into an informative visualization using ggplot2 and patchwork.
library(ggplot2)library(patchwork)Daily Downloads The first plot will show the daily downloads over time. I will use a line chart for that purpose. Remember from part 1 that the daily_downloads dataset contains the aggregated number of downloads per day.</description>
    </item>
    
    <item>
      <title>Analyzing the ggcharts CRAN Downloads. Part 1: Getting Data</title>
      <link>/posts/ggcharts-cran-downloads-part-1/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-cran-downloads-part-1/</guid>
      <description>Introduction It&amp;rsquo;s been a little over two weeks since my ggcharts package has been published on CRAN. As you can imagine I am curious to see how many people actually use the package. While there is no way to actually measure the usage, the number of package downloads seems like a good proxy to me.
CRAN Logs Getting data on the number of package downloads is fairly easy thanks to the cranlogs package.</description>
    </item>
    
    <item>
      <title>Adding labels to a ggplot2 bar chart</title>
      <link>/posts/labels-ggplot2-bar-chart/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/labels-ggplot2-bar-chart/</guid>
      <description>I often see bar charts where the bars are directly labeled with the value they represent. In this post I will walk you through how you can create such labeled bar charts using ggplot2.
The data I will use comes from the 2019 Stackoverflow Developer Survey. To make creating the plot easier I will use the bar_chart() function from my ggcharts package which outputs a ggplot that can be customized further using any ggplot2 function.</description>
    </item>
    
    <item>
      <title>Transform a ggplot2 axis to a percentage scale</title>
      <link>/posts/ggplot2-percentage-scale/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggplot2-percentage-scale/</guid>
      <description>When plotting a variable whose unit of measure is percent it&amp;rsquo;s best practice to have the axis labels contain the percentage sign (%). This makes it obvious to anyone looking at the data visualization that they are dealing with percentages.
To illustrate this let&amp;rsquo;s create an example dataset.
library(dplyr)data(mtcars)cyl &amp;lt;- mtcars %&amp;gt;%count(cyl) %&amp;gt;%mutate(pct = n / sum(n) * 100) %&amp;gt;%print()## # A tibble: 3 x 3## cyl n pct## &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;## 1 4 11 34.</description>
    </item>
    
    <item>
      <title>Always display the current date in an Rmarkdown report</title>
      <link>/posts/rmarkdown-current-date/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/rmarkdown-current-date/</guid>
      <description>Rmarkdown is a great tool for creating data-driven reports that have to be updated on a regular basis. To communicate to stakeholders that the report is indeed up to date it&amp;rsquo;s important to display the current date below the title.
An obvious solution to display the current date is to update the date field in the YAML header manually before knitting. But this is both error prone and you are likely to forget about it.</description>
    </item>
    
    <item>
      <title>Getting R to print English error messages</title>
      <link>/posts/getting-r-to-print-english-error-messages/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/getting-r-to-print-english-error-messages/</guid>
      <description>If you live in a non-English locale such as I do, you&amp;rsquo;ll likely receive error messages in your locale language when things go wrong in R.
1 + &amp;#34;r&amp;#34;## Error in 1 + &amp;quot;r&amp;quot;: nicht-numerisches Argument für binären OperatorThis is a problem because it highly limits the results when searching for error messages on Google. Have you ever read a stackoverflow post that was not in English? I haven&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>A case for the assign() function</title>
      <link>/posts/a-case-for-the-assign-function/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/a-case-for-the-assign-function/</guid>
      <description>In R, assign() is one of those functions that common wisdom says you shouldn&amp;rsquo;t be using. My aim in this blog post is to convince you that assign() can be very handy.
The pharmaceutical industry, which I work in, is still SAS dominated so my primary data source at work are .sas7bdat files. Thus, whenever I use R the first thing I have to do is read in those files.</description>
    </item>
    
  </channel>
</rss>