<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thomas&#39; adventuRe</title>
    <link>/</link>
    <description>Recent content on Thomas&#39; adventuRe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 14 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analyzing the ggcharts CRAN Downloads. Part 1: Getting Data</title>
      <link>/posts/ggcharts-cran-downloads-part-1/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-cran-downloads-part-1/</guid>
      <description>Introduction It&amp;rsquo;s been a little over two weeks since my ggcharts package has been published on CRAN. As you can imagine I am curious to see how many people actually use the package. While there is no way to actually measure the usage, the number of package downloads seems like a good proxy to me.
CRAN Logs Getting data on the number of package downloads is fairly easy thanks to the cranlogs package.</description>
    </item>
    
    <item>
      <title>Adding labels to a ggplot2 bar chart</title>
      <link>/posts/labels-ggplot2-bar-chart/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/labels-ggplot2-bar-chart/</guid>
      <description>I often see bar charts where the bars are directly labeled with the value they represent. In this post I will walk you through how you can create such labeled bar charts using ggplot2.
The data I will use comes from the 2019 Stackoverflow Developer Survey. To make creating the plot easier I will use the bar_chart() function from my ggcharts package which outputs a ggplot that can be customized further using any ggplot2 function.</description>
    </item>
    
    <item>
      <title>Transform a ggplot2 axis to a percentage scale</title>
      <link>/posts/ggplot2-percentage-scale/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggplot2-percentage-scale/</guid>
      <description>When plotting a variable whose unit of measure is percent it&amp;rsquo;s best practice to have the axis labels contain the percentage sign (%). This makes it obvious to anyone looking at the data visualization that they are dealing with percentages.
To illustrate this let&amp;rsquo;s create an example dataset.
library(dplyr)data(mtcars)cyl &amp;lt;- mtcars %&amp;gt;%count(cyl) %&amp;gt;%mutate(pct = n / sum(n) * 100) %&amp;gt;%print()## # A tibble: 3 x 3## cyl n pct## &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;## 1 4 11 34.</description>
    </item>
    
    <item>
      <title>Always display the current date in an Rmarkdown report</title>
      <link>/posts/rmarkdown-current-date/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/rmarkdown-current-date/</guid>
      <description>Rmarkdown is a great tool for creating data-driven reports that have to be updated on a regular basis. To communicate to stakeholders that the report is indeed up to date it&amp;rsquo;s important to display the current date below the title.
An obvious solution to display the current date is to update the date field in the YAML header manually before knitting. But this is both error prone and you are likely to forget about it.</description>
    </item>
    
    <item>
      <title>Getting R to print English error messages</title>
      <link>/posts/getting-r-to-print-english-error-messages/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/getting-r-to-print-english-error-messages/</guid>
      <description>If you live in a non-English locale such as I do, you&amp;rsquo;ll likely receive error messages in your locale language when things go wrong in R.
1 + &amp;#34;r&amp;#34;## Error in 1 + &amp;quot;r&amp;quot;: nicht-numerisches Argument für binären OperatorThis is a problem because it highly limits the results when searching for error messages on Google. Have you ever read a stackoverflow post that was not in English? I haven&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>A case for the assign() function</title>
      <link>/posts/a-case-for-the-assign-function/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/a-case-for-the-assign-function/</guid>
      <description>In R, assign() is one of those functions that common wisdom says you shouldn&amp;rsquo;t be using. My aim in this blog post is to convince you that assign() can be very handy.
The pharmaceutical industry, which I work in, is still SAS dominated so my primary data source at work are .sas7bdat files. Thus, whenever I use R the first thing I have to do is read in those files.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>My name is Thomas Neitmann. I am a R enthusiast currently working for Swiss pharmaceutcial company Roche as a Statistical Programmer Analyst for late-phase clinical trials in oncology.
My R journey began in 2014 when a coworker told me to run an R script to &amp;ldquo;analyze some data&amp;rdquo;. Having never programmed before at that time I was overwhelmed. But I took on the challenge and soon realized the power and joy of programming.</description>
    </item>
    
    <item>
      <title>Streamline your dplyr chains with count()</title>
      <link>/posts/dplyr-count/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/dplyr-count/</guid>
      <description>If you frequently use chains like this
data %&amp;gt;%group_by(var1, var2) %&amp;gt;%summarise(n = n())consider using
count(data, var1, var2)instead. It produces the same output, you need to type less and the code is more expressive.
By default, the column containing the count will be named n. Want to change that? Simply set the name parameter of count(), e.g.
data(iris)dplyr::count(iris, Species, name = &amp;#34;n_flowers&amp;#34;)## # A tibble: 3 x 2## Species n_flowers## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;## 1 setosa 50## 2 versicolor 50## 3 virginica 50</description>
    </item>
    
    <item>
      <title>Creating dumbbell charts with the ggcharts R package</title>
      <link>/posts/dumbbel-charts-with-ggcharts/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/dumbbel-charts-with-ggcharts/</guid>
      <description>library(ggcharts)library(dplyr)library(gapminder)data(gapminder)I am very pleased to announce that my ggcharts package has a new feature: dumbbell_chart().
To showcase this new function I will use the gapminder dataset which contains countries&amp;rsquo; population counts from 1952 to 2017. This dataset is in long format. In order for dumbbell_chart() to work properly the data has to be in wide format, though. So, first a bit of data wrangling.
gapminder_wide &amp;lt;- gapminder %&amp;gt;%mutate(pop = pop / 1e6) %&amp;gt;%filter(year %in% c(1952, 2007)) %&amp;gt;%tidyr::pivot_wider(id_cols = country,names_from = year,values_from = pop,names_prefix = &amp;#34;pop_&amp;#34;)gapminder_wide## # A tibble: 142 x 3## country pop_1952 pop_2007## &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;## 1 Afghanistan 8.</description>
    </item>
    
    <item>
      <title>Changing things up with ggplot2 themes</title>
      <link>/posts/changing-things-up-with-ggplot2-themes/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/changing-things-up-with-ggplot2-themes/</guid>
      <description>Are you tired of adding your favorite ggplot2 theme to every data visualization you create in R? Then I have a solution for you!
Before you start to create any plots call the theme_set() function with your favorite theme as first argument, e.g.
library(ggplot2)theme_set(theme_minimal())That will ensure all plots you subsequently create will use this theme unless you add a different one.
data(&amp;#34;mtcars&amp;#34;)ggplot(mtcars, aes(hp, mpg, color = wt)) +geom_point()Very handy for lazy people like me.</description>
    </item>
    
  </channel>
</rss>