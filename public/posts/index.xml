<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Thomas&#39; AdventuRe</title>
		<link>/posts/</link>
		<description>Recent content in Posts on Thomas&#39; AdventuRe</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 06 Mar 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>dplyr::count()</title>
			<link>/posts/dplyr-count/</link>
			<pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/dplyr-count/</guid>
			<description>If you frequently use chains like this
data %&amp;gt;%group_by(var1, var2) %&amp;gt;%summarise(n = n())consider using
count(data, var1, var2)instead. It produces the same output, you need to type less and the code is more expressive.
By default, the column containing the count will be named n. Want to change that? Simply set the name parameter of count(), e.g.
data(iris)dplyr::count(iris, Species, name = &amp;#34;n_flowers&amp;#34;)## # A tibble: 3 x 2## Species n_flowers## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;## 1 setosa 50## 2 versicolor 50## 3 virginica 50</description>
			<content type="html"><![CDATA[<p>If you frequently use chains like this</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">data</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">summarise</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="nf">n</span><span class="p">())</span>
</code></pre></div><p>consider using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">count</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span>
</code></pre></div><p>instead. It produces the same output, you need to type less and the code is more expressive.</p>
<p>By default, the column containing the count will be named <code>n</code>. Want to change that? Simply set the <code>name</code> parameter of <code>count()</code>, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span>
<span class="n">dplyr</span><span class="o">::</span><span class="nf">count</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="n">Species</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;n_flowers&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>## # A tibble: 3 x 2
##   Species    n_flowers
##   &lt;fct&gt;          &lt;int&gt;
## 1 setosa            50
## 2 versicolor        50
## 3 virginica         50
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Changing things up with ggplot2 themes</title>
			<link>/posts/changing-things-up-with-ggplot2-themes/</link>
			<pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/changing-things-up-with-ggplot2-themes/</guid>
			<description>Are you tired of adding your favorite ggplot2 theme to every data visualization you create in R? Then I have a solution for you!
Before you start to create any plots call the theme_set() function with your favorite theme as first argument, e.g.
library(ggplot2)theme_set(theme_minimal())That will ensure all plots you subsequently create will use this theme unless you add a different one.
data(&amp;#34;mtcars&amp;#34;)ggplot(mtcars, aes(hp, mpg, color = wt)) +geom_point()Very handy for lazy people like me.</description>
			<content type="html"><![CDATA[<p>Are you tired of adding your favorite <code>ggplot2</code> theme to every data visualization you create in <code>R</code>? Then I have a solution for you!</p>
<p>Before you start to create any plots call the <code>theme_set()</code> function with your favorite theme as first argument, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">theme_set</span><span class="p">(</span><span class="nf">theme_minimal</span><span class="p">())</span>
</code></pre></div><p>That will ensure all plots you subsequently create will use this theme unless you add a different one.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="s">&#34;mtcars&#34;</span><span class="p">)</span>
<span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Very handy for lazy people like me.</p>
]]></content>
		</item>
		
		<item>
			<title>Renaming files in a git repository</title>
			<link>/posts/renaming-files-in-a-git-repository/</link>
			<pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/renaming-files-in-a-git-repository/</guid>
			<description>If you are using git for your data science project (which you should!), you have to be careful when renaming a file.
If you simply rename the file in your OS file browser, git would interpret this as deleting the file with the old name and creating a new one with the new name. They wouldn&amp;rsquo;t be linked in any way and you&amp;rsquo;d essentially loose the history of that file.</description>
			<content type="html"><![CDATA[<p>If you are using <code>git</code> for your data science project (which you should!), you have to be careful when renaming a file.</p>
<p>If you simply rename the file in your OS file browser, <code>git</code> would interpret this as deleting the file with the old name and creating a new one with the new name. They wouldn&rsquo;t be linked in any way and you&rsquo;d essentially loose the history of that file.</p>
<p>So, how can you rename a file and keep its history? You need to use the <code>git mv</code> command and subsequently make a commit. Here&rsquo;s an example:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git mv old_name.ext new_name.ext
git commit -m <span class="s1">&#39;Rename old_name.ext to new_name.txt&#39;</span>
</code></pre></div><p>That&rsquo;s it! Don&rsquo;t be afraid to rename a file when using <code>git</code>. Just use the right command.</p>
]]></content>
		</item>
		
		<item>
			<title>Is a library the same thing as a package?</title>
			<link>/posts/is-a-library-the-same-thing-as-a-package/</link>
			<pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/is-a-library-the-same-thing-as-a-package/</guid>
			<description>In R you use the library() function to load a package. Thus, surely a package and a library must be the same thing, right?
Actually no, they are not!
So, what&amp;rsquo;s the difference between the two? A library is nothing but a folder on your computer in which installed packages are saved. Just like a real library that contains books. It is merely a container. A library on its own is useless.</description>
			<content type="html"><![CDATA[<p>In <code>R</code> you use the <code>library()</code> function to load a package. Thus, surely a package and a library must be the same thing, right?</p>
<p>Actually no, they are not!</p>
<p>So, what&rsquo;s the difference between the two? A library is nothing but a folder on your computer in which installed packages are saved. Just like a real library that contains books. It is merely a container. A library on its own is useless. It&rsquo;s the content, the packages, that gives you the power to do almost anything in <code>R</code>.</p>
<p>If you are using <code>R</code> on Windows you&rsquo;ll likely have two libraries. One system wide library containing all packages that come with <code>R</code> and a user library that contains all packages you have installed on top of the defaults.</p>
<p>To see which libraries you are using use</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">.libPaths</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] &quot;C:/Users/neitmant/R-Portable/App/R-Portable/library&quot;
</code></pre><p>You can use the same function to tell <code>R</code> that a certain folder on your computer should be considered a library, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">.libPaths</span><span class="p">(</span><span class="s">&#34;./library&#34;</span><span class="p">)</span>
</code></pre></div><p>Be aware, though, that this will overwrite your default libraries. To add an additional library on top of the existing ones you need to be explicit.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">old_libraries</span> <span class="o">&lt;-</span> <span class="nf">.libPaths</span><span class="p">()</span>
<span class="nf">.libPaths</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s">&#34;./library&#34;</span><span class="p">,</span> <span class="n">old_libraries</span><span class="p">))</span>
</code></pre></div><p>With that being said you know why I invetiable have to smile if I see an article about the top five <code>R</code> libraries for xyz.</p>
]]></content>
		</item>
		
		<item>
			<title>Enhacing ggplot2 with ggtext</title>
			<link>/posts/enhacing-ggplot2-with-ggtext/</link>
			<pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/enhacing-ggplot2-with-ggtext/</guid>
			<description>I am super exciting to share with you my recent &amp;ldquo;discovery&amp;rdquo; of the ggtext R package.
I had looked for a solution to color individual words in the title of a ggplot2 data visualization and ggtext provided me with a great solution for doing just that (and more).
So, how does it work? Have a look at this example:
library(ggplot2)library(dplyr)library(gapminder)data(gapminder)gapminder %&amp;gt;%filter(continent %in% c(&amp;#34;Africa&amp;#34;, &amp;#34;Europe&amp;#34;)) %&amp;gt;%group_by(continent, year) %&amp;gt;%summarise(population = sum(pop / 1e9)) %&amp;gt;%ggplot(aes(year, population, color = continent)) +geom_line(size = 1.</description>
			<content type="html"><![CDATA[<p>I am super exciting to share with you my recent &ldquo;discovery&rdquo; of the <code>ggtext</code> <code>R</code> package.</p>
<p>I had looked for a solution to color individual words in the title of a <code>ggplot2</code> data visualization and <code>ggtext</code> provided me with a great solution for doing just that (and more).</p>
<p>So, how does it work? Have a look at this example:</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>

<span class="n">gapminder</span> <span class="o">%&gt;%</span>
  <span class="nf">filter</span><span class="p">(</span><span class="n">continent</span> <span class="o">%in%</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;Africa&#34;</span><span class="p">,</span> <span class="s">&#34;Europe&#34;</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">continent</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">summarise</span><span class="p">(</span><span class="n">population</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">pop</span> <span class="o">/</span> <span class="m">1e9</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">continent</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_line</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="m">1.2</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">ggtitle</span><span class="p">(</span>
    <span class="nf">paste0</span><span class="p">(</span>
      <span class="s">&#34;&lt;span style = &#39;color:#FF7F0E&#39;&gt;**Africa**&lt;/span&gt;&#34;</span><span class="p">,</span>
      <span class="s">&#34; outgrew &lt;span style = &#39;color:#1F77B4&#39;&gt;**Europe**&lt;/span&gt;&#34;</span><span class="p">,</span>
      <span class="s">&#34; *dramtically* in the 20th Century&#34;</span>
    <span class="p">)</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">scale_color_manual</span><span class="p">(</span><span class="n">values</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;Europe&#34;</span> <span class="o">=</span> <span class="s">&#34;#1F77B4&#34;</span><span class="p">,</span> <span class="s">&#34;Africa&#34;</span> <span class="o">=</span> <span class="s">&#34;#FF7F0E&#34;</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span>
    <span class="n">plot.title</span> <span class="o">=</span> <span class="n">ggtext</span><span class="o">::</span><span class="nf">element_markdown</span><span class="p">(),</span>
    <span class="n">legend.position</span> <span class="o">=</span> <span class="s">&#34;none&#34;</span>
  <span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Inside <code>theme()</code> I am assigning <code>ggtext::element_markdown()</code> to <code>plot.title</code>. This has the effect that the plot title I created using <code>ggtitle()</code> is interpreted as markdown/HTML. That made it possible to have the title of the plot act as a legend by coloring the appropriate keywords.</p>
<p>Quite a neat solution, isn&rsquo;t it?</p>
<p>While you need to revert to HTML for coloring the text you can use markdown for making individual words bold (e.g. <code>**Europe**</code>), italics (e.g. <code>*dramatically*</code>) and so forth. I love the flexibility this offers.</p>
<p>The <code>ggtext</code> package is not yet available on CRAN but you can install it from GitHub using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">remotes</span><span class="o">::</span><span class="nf">install_github</span><span class="p">(</span><span class="s">&#34;wilkelab/ggtext&#34;</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Creating excel files from R using openxlsx</title>
			<link>/posts/creating-excel-files-from-r-using-openxlsx/</link>
			<pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/creating-excel-files-from-r-using-openxlsx/</guid>
			<description>Yesterday I had to share data with some internal stakeholders in excel format. Why excel? Well, I guess if you are not a &amp;ldquo;data professional&amp;rdquo;, then that&amp;rsquo;s the easiest format to work with.
So, I started R, read in the dataset, did some data wrangling and then wanted to write the data to a xlsx file. I heard great things about the openxlsx package so I used it for the first time.</description>
			<content type="html"><![CDATA[<p>Yesterday I had to share data with some internal stakeholders in excel format. Why excel? Well, I guess if you are not a &ldquo;data professional&rdquo;, then that&rsquo;s the easiest format to work with.</p>
<p>So, I started <code>R</code>, read in the dataset, did some data wrangling and then wanted to write the data to a xlsx file. I heard great things about the <code>openxlsx</code> package so I used it for the first time. My initial attempt was using the <code>write.xlsx()</code> function. That certainly did the job but the resulting file didn&rsquo;t look how I like my excel files. I am a fan of a freezed top row with bold and centered column headers.</p>
<p>I digged a bit into the <code>openxlsx</code> documentation and it turned out that the package can do all of this. Great!</p>
<p>Here is the code I used (obviously not exporting the mtcars dataset):</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">openxlsx</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>

<span class="n">header_style</span> <span class="o">&lt;-</span> <span class="nf">createStyle</span><span class="p">(</span><span class="n">halign</span> <span class="o">=</span> <span class="s">&#34;center&#34;</span><span class="p">,</span> <span class="n">textDecoration</span> <span class="o">=</span> <span class="s">&#34;bold&#34;</span><span class="p">)</span>

<span class="n">wb</span> <span class="o">&lt;-</span> <span class="nf">createWorkbook</span><span class="p">()</span>

<span class="nf">addWorksheet</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">)</span>
<span class="nf">writeData</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">mtcars</span><span class="p">,</span> <span class="n">headerStyle</span> <span class="o">=</span> <span class="n">header_style</span><span class="p">)</span>
<span class="nf">freezePane</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">firstRow</span> <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span>
<span class="nf">setColWidths</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">cols</span> <span class="o">=</span> <span class="m">1</span><span class="o">:</span><span class="nf">ncol</span><span class="p">(</span><span class="n">mtcars</span><span class="p">),</span> <span class="n">widths</span> <span class="o">=</span> <span class="s">&#34;auto&#34;</span><span class="p">)</span>
<span class="nf">saveWorkbook</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&#34;mtcars.xlsx&#34;</span><span class="p">,</span> <span class="n">overwrite</span> <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span>
</code></pre></div><p>The only thing that didn&rsquo;t quite work was adjusting the column width to fit the content. While there is a <code>setColWidths()</code> function where you can set the <code>widths</code> parameter to <code>&quot;auto&quot;</code> that didn&rsquo;t work a 100%. It <em>did</em> look much better than having all columns in the standard width, though. In the end that was good enough for me.</p>
]]></content>
		</item>
		
	</channel>
</rss>
