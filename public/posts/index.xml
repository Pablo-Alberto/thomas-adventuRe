<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hugo Hermit</title>
		<link>/posts/</link>
		<description>Recent content in Posts on Hugo Hermit</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 06 Mar 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>dplyr::count()</title>
			<link>/posts/dplyr-count/</link>
			<pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/dplyr-count/</guid>
			<description>If you frequently use chains like this
data %&amp;gt;%group_by(var1, var2) %&amp;gt;%summarise(n = n())consider using
count(data, var1, var2)instead. It produces the same output, you need to type less and the code is more expressive.
By default, the column containing the count will be named n. Want to change that? Simply set the name parameter of count(), e.g.
data(iris)dplyr::count(iris, Species, name = &amp;#34;n_flowers&amp;#34;)## # A tibble: 3 x 2## Species n_flowers## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;## 1 setosa 50## 2 versicolor 50## 3 virginica 50</description>
			<content type="html"><![CDATA[<p>If you frequently use chains like this</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">data</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">summarise</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="nf">n</span><span class="p">())</span>
</code></pre></div><p>consider using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">count</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span>
</code></pre></div><p>instead. It produces the same output, you need to type less and the code is more expressive.</p>
<p>By default, the column containing the count will be named <code>n</code>. Want to change that? Simply set the <code>name</code> parameter of <code>count()</code>, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span>
<span class="n">dplyr</span><span class="o">::</span><span class="nf">count</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="n">Species</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;n_flowers&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>## # A tibble: 3 x 2
##   Species    n_flowers
##   &lt;fct&gt;          &lt;int&gt;
## 1 setosa            50
## 2 versicolor        50
## 3 virginica         50
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Changing things up with ggplot2 themes</title>
			<link>/posts/changing-things-up-with-ggplot2-themes/</link>
			<pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/changing-things-up-with-ggplot2-themes/</guid>
			<description>Are you tired of adding your favorite ggplot2 theme to every data visualization you create in R? Then I have a solution for you!
Before you start to create any plots call the theme_set() function with your favorite theme as first argument, e.g.
library(ggplot2)theme_set(theme_minimal())That will ensure all plots you subsequently create will use this theme unless you add a different one.
data(&amp;#34;mtcars&amp;#34;)ggplot(mtcars, aes(hp, mpg, color = wt)) +geom_point()Very handy for lazy people like me.</description>
			<content type="html"><![CDATA[<p>Are you tired of adding your favorite <code>ggplot2</code> theme to every data visualization you create in <code>R</code>? Then I have a solution for you!</p>
<p>Before you start to create any plots call the <code>theme_set()</code> function with your favorite theme as first argument, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">theme_set</span><span class="p">(</span><span class="nf">theme_minimal</span><span class="p">())</span>
</code></pre></div><p>That will ensure all plots you subsequently create will use this theme unless you add a different one.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="s">&#34;mtcars&#34;</span><span class="p">)</span>
<span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Very handy for lazy people like me.</p>
]]></content>
		</item>
		
		<item>
			<title>Is a library the same thing as a package?</title>
			<link>/posts/is-a-library-the-same-thing-as-a-package/</link>
			<pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/is-a-library-the-same-thing-as-a-package/</guid>
			<description>In R you use the library() function to load a package. Thus, surely a package and a library must be the same thing, right?
Actually no, they are not!
So, what&amp;rsquo;s the difference between the two? A library is nothing but a folder on your computer in which installed packages are saved. Just like a real library that contains books. It is merely a container. A library on its own is useless.</description>
			<content type="html"><![CDATA[<p>In <code>R</code> you use the <code>library()</code> function to load a package. Thus, surely a package and a library must be the same thing, right?</p>
<p>Actually no, they are not!</p>
<p>So, what&rsquo;s the difference between the two? A library is nothing but a folder on your computer in which installed packages are saved. Just like a real library that contains books. It is merely a container. A library on its own is useless. It&rsquo;s the content, the packages, that gives you the power to do almost anything in <code>R</code>.</p>
<p>If you are using <code>R</code> on Windows you&rsquo;ll likely have two libraries. One system wide library containing all packages that come with <code>R</code> and a user library that contains all packages you have installed on top of the defaults.</p>
<p>To see which libraries you are using use</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">.libPaths</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] &quot;C:/Users/neitmant/R-Portable/App/R-Portable/library&quot;
</code></pre><p>You can use the same function to tell <code>R</code> that a certain folder on your computer should be considered a library, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">.libPaths</span><span class="p">(</span><span class="s">&#34;./library&#34;</span><span class="p">)</span>
</code></pre></div><p>Be aware, though, that this will overwrite your default libraries. To add an additional library on top of the existing ones you need to be explicit.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">old_libraries</span> <span class="o">&lt;-</span> <span class="nf">.libPaths</span><span class="p">()</span>
<span class="nf">.libPaths</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s">&#34;./library&#34;</span><span class="p">,</span> <span class="n">old_libraries</span><span class="p">))</span>
</code></pre></div><p>With that being said you know why I invetiable have to smile if I see an article about the top five <code>R</code> libraries for xyz.</p>
]]></content>
		</item>
		
	</channel>
</rss>
