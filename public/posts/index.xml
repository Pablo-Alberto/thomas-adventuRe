<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Thomas&#39; AdventuRe</title>
		<link>/posts/</link>
		<description>Recent content in Posts on Thomas&#39; AdventuRe</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Getting R to print English error messages</title>
			<link>/posts/getting-r-to-print-english-error-messages/</link>
			<pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/getting-r-to-print-english-error-messages/</guid>
			<description>If you live in a non-English locale such as I do, you&amp;rsquo;ll likely receive error messages in your locale language when things go wrong in R.
1 + &amp;#34;r&amp;#34;## Error in 1 + &amp;quot;r&amp;quot;: nicht-numerisches Argument f체r bin채ren OperatorThis is a problem because it highly limits the results when searching for error messages on Google. Have you ever read a stackoverflow post that was not in English? I haven&amp;rsquo;t.</description>
			<content type="html"><![CDATA[<p>If you live in a non-English locale such as I do, you&rsquo;ll likely receive error messages in your locale language when things go wrong in <code>R</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="m">1</span> <span class="o">+</span> <span class="s">&#34;r&#34;</span>
</code></pre></div><pre><code>## Error in 1 + &quot;r&quot;: nicht-numerisches Argument f체r bin채ren Operator
</code></pre><p>This is a problem because it highly limits the results when searching for error messages on Google. Have you ever read a stackoverflow post that was not in English? I haven&rsquo;t.</p>
<p>So, how can you tell <code>R</code> to <em>not</em> translate error messages? By telling <code>R</code> that you are in an English locale.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">Sys.setenv</span><span class="p">(</span><span class="n">lang</span> <span class="o">=</span> <span class="s">&#34;en_US&#34;</span><span class="p">)</span>
</code></pre></div><p>Your next error will be printed in English.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="m">1</span> <span class="o">+</span> <span class="s">&#34;r&#34;</span>
</code></pre></div><pre><code>## Error in 1 + &quot;r&quot;: non-numeric argument to binary operator
</code></pre><p>Great!</p>
<p>The only problem with this approach is that the next time you start a new <code>R</code> session this change will be reverted. To make this change persistent add <code>Sys.setenv(lang = &quot;en_US&quot;)</code> to your <code>.Rprofile</code> file.</p>
<p>Never heard of <code>.Rprofile</code>? It&rsquo;s basically an <code>R</code> script that - if present - gets executed whenever you start <code>R</code>. That makes it perfect for the purpose of changing your locale.</p>
]]></content>
		</item>
		
		<item>
			<title>A case for the assign() function</title>
			<link>/posts/a-case-for-the-assign-function/</link>
			<pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/a-case-for-the-assign-function/</guid>
			<description>In R, assign() is one of those functions that common wisdom says you shouldn&amp;rsquo;t be using. My aim in this blog post is to convince you that assign() can be very handy.
The pharmaceutical industry, which I work in, is still SAS dominated so my primary data source at work are .sas7bdat files. Thus, whenever I use R the first thing I have to do is read in those files.</description>
			<content type="html"><![CDATA[<p>In <code>R</code>, <code>assign()</code> is one of those functions that common wisdom says you shouldn&rsquo;t be using. My aim in this blog post is to convince you that <code>assign()</code> can be very handy.</p>
<p>The pharmaceutical industry, which I work in, is still <code>SAS</code> dominated so my primary data source at work are <code>.sas7bdat</code> files. Thus, whenever I use <code>R</code> the first thing I have to do is read in those files.</p>
<p>Since the files have standard names, e.g. <code>ADAE</code> (Analysis Datasets Adverse Events), I want to read them into the global environment with exactly these names.</p>
<p>For a single file that&rsquo;s easy. Just give the variable the same name as the file.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">adae</span> <span class="o">&lt;-</span> <span class="n">haven</span><span class="o">::</span><span class="nf">read_sas</span><span class="p">(</span><span class="s">&#34;data/adae.sas7bdat&#34;</span><span class="p">)</span>
</code></pre></div><p>If you have a directory with multiple files in it this becomes tedious, though. Let&rsquo;s simulate this by creating a couple of <code>.csv</code> files with random numbers in it.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">dir</span> <span class="o">&lt;-</span> <span class="nf">tempdir</span><span class="p">()</span>
<span class="n">datasets</span> <span class="o">&lt;-</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;adsl.csv&#34;</span><span class="p">,</span> <span class="s">&#34;adae.csv&#34;</span><span class="p">,</span> <span class="s">&#34;adrs.csv&#34;</span><span class="p">,</span> <span class="s">&#34;adtte.csv&#34;</span><span class="p">)</span>
<span class="nf">for </span><span class="p">(</span><span class="n">dataset</span> <span class="n">in</span> <span class="n">datasets</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">data</span> <span class="o">&lt;-</span> <span class="nf">matrix</span><span class="p">(</span><span class="nf">rnorm</span><span class="p">(</span><span class="m">100</span><span class="p">),</span> <span class="n">nrow</span> <span class="o">=</span> <span class="m">10</span><span class="p">)</span>
  <span class="nf">write.csv</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="nf">file.path</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">dataset</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div><p>With the data ready the first step is to get a list of all files. Note that I purposefully set <code>full.names = FALSE</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">files</span> <span class="o">&lt;-</span> <span class="nf">list.files</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">&#34;csv$&#34;</span><span class="p">,</span> <span class="n">full.names</span> <span class="o">=</span> <span class="kc">FALSE</span><span class="p">))</span>
</code></pre></div><pre><code>## [1] &quot;adae.csv&quot;  &quot;adrs.csv&quot;  &quot;adsl.csv&quot;  &quot;adtte.csv&quot;
</code></pre><p>Next, to read in all those files I loop over each file and</p>
<ul>
<li>remove the extension from <code>file</code></li>
<li>construct the full path to the file with <code>file.path()</code></li>
<li>read in the <code>.csv</code> file and <code>assign</code> it to its name.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">for </span><span class="p">(</span><span class="n">file</span> <span class="n">in</span> <span class="n">files</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">file_name</span> <span class="o">&lt;-</span> <span class="n">tools</span><span class="o">::</span><span class="nf">file_path_sans_ext</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
  <span class="n">full_path_to_file</span> <span class="o">&lt;-</span> <span class="nf">file.path</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
  <span class="nf">assign</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="nf">read.csv</span><span class="p">(</span><span class="n">full_path_to_file</span><span class="p">),</span> <span class="n">envir</span> <span class="o">=</span> <span class="n">.GlobalEnv</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Note that <code>envir = .GlobalEnv</code> is redundant here but I like to be explicit. 
Let&rsquo;s make sure that this actually worked as expected.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">ls</span><span class="p">()</span>
</code></pre></div><pre><code>##  [1] &quot;adae&quot;              &quot;adrs&quot;              &quot;adsl&quot;             
##  [4] &quot;adtte&quot;             &quot;data&quot;              &quot;dataset&quot;          
##  [7] &quot;datasets&quot;          &quot;dir&quot;               &quot;file&quot;             
## [10] &quot;file_name&quot;         &quot;files&quot;             &quot;full_path_to_file&quot;
</code></pre><p>Indeed, now there are five new variables in the global environment that have the names of the files created earlier.</p>
<p>Without using <code>assign()</code> you&rsquo;d end up putting all datasets in a <code>list</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">data</span> <span class="o">&lt;-</span> <span class="nf">lapply</span><span class="p">(</span><span class="n">files</span><span class="p">,</span> <span class="nf">function</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">read.csv</span><span class="p">(</span><span class="nf">file.path</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">file</span><span class="p">))</span>
<span class="p">})</span>
</code></pre></div><p>That may not be so bad but actually this list doesn&rsquo;t have names which is a problem.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">names</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div><pre><code>## NULL
</code></pre><p>I hope this convinced you that <code>assign()</code> is a useful function.</p>
<p>Did you ever use <code>assign()</code>? I&rsquo;d love to know in the comments.</p>
]]></content>
		</item>
		
		<item>
			<title>dplyr::count()</title>
			<link>/posts/dplyr-count/</link>
			<pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/dplyr-count/</guid>
			<description>If you frequently use chains like this
data %&amp;gt;%group_by(var1, var2) %&amp;gt;%summarise(n = n())consider using
count(data, var1, var2)instead. It produces the same output, you need to type less and the code is more expressive.
By default, the column containing the count will be named n. Want to change that? Simply set the name parameter of count(), e.g.
data(iris)dplyr::count(iris, Species, name = &amp;#34;n_flowers&amp;#34;)## # A tibble: 3 x 2## Species n_flowers## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;## 1 setosa 50## 2 versicolor 50## 3 virginica 50</description>
			<content type="html"><![CDATA[<p>If you frequently use chains like this</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">data</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">summarise</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="nf">n</span><span class="p">())</span>
</code></pre></div><p>consider using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">count</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span>
</code></pre></div><p>instead. It produces the same output, you need to type less and the code is more expressive.</p>
<p>By default, the column containing the count will be named <code>n</code>. Want to change that? Simply set the <code>name</code> parameter of <code>count()</code>, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span>
<span class="n">dplyr</span><span class="o">::</span><span class="nf">count</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="n">Species</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;n_flowers&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>## # A tibble: 3 x 2
##   Species    n_flowers
##   &lt;fct&gt;          &lt;int&gt;
## 1 setosa            50
## 2 versicolor        50
## 3 virginica         50
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Dumbbell charts with ggcharts</title>
			<link>/posts/dumbbel-charts-with-ggcharts/</link>
			<pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/dumbbel-charts-with-ggcharts/</guid>
			<description>library(ggcharts)library(dplyr)library(gapminder)data(gapminder)I am very pleased to announce that my ggcharts package has a new feature: dumbbell_chart().
To showcase this new function I will use the gapminder dataset which contains countries&amp;rsquo; population counts from 1952 to 2017. This dataset is in long format. In order for dumbbell_chart() to work properly the data has to be in wide format, though. So, first a bit of data wrangling.
gapminder_wide &amp;lt;- gapminder %&amp;gt;%mutate(pop = pop / 1e6) %&amp;gt;%filter(year %in% c(1952, 2007)) %&amp;gt;%tidyr::pivot_wider(id_cols = country,names_from = year,values_from = pop,names_prefix = &amp;#34;pop_&amp;#34;)gapminder_wide## # A tibble: 142 x 3## country pop_1952 pop_2007## &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;## 1 Afghanistan 8.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggcharts</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>
</code></pre></div><p>I am very pleased to announce that my <a href="https://github.com/thomas-neitmann/ggcharts"><code>ggcharts</code></a> package has a new feature: <code>dumbbell_chart()</code>.</p>
<p>To showcase this new function I will use the <code>gapminder</code> dataset which contains countries&rsquo; population counts from 1952 to 2017. This dataset is in long format. In order for <code>dumbbell_chart()</code> to work properly the data has to be in <em>wide</em> format, though. So, first a bit of data wrangling.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">gapminder_wide</span> <span class="o">&lt;-</span> <span class="n">gapminder</span> <span class="o">%&gt;%</span>
  <span class="nf">mutate</span><span class="p">(</span><span class="n">pop</span> <span class="o">=</span> <span class="n">pop</span> <span class="o">/</span> <span class="m">1e6</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">filter</span><span class="p">(</span><span class="n">year</span> <span class="o">%in%</span> <span class="nf">c</span><span class="p">(</span><span class="m">1952</span><span class="p">,</span> <span class="m">2007</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="n">tidyr</span><span class="o">::</span><span class="nf">pivot_wider</span><span class="p">(</span>
    <span class="n">id_cols</span> <span class="o">=</span> <span class="n">country</span><span class="p">,</span>
    <span class="n">names_from</span> <span class="o">=</span> <span class="n">year</span><span class="p">,</span>
    <span class="n">values_from</span> <span class="o">=</span> <span class="n">pop</span><span class="p">,</span>
    <span class="n">names_prefix</span> <span class="o">=</span> <span class="s">&#34;pop_&#34;</span>
  <span class="p">)</span>
<span class="n">gapminder_wide</span>
</code></pre></div><pre><code>## # A tibble: 142 x 3
##    country     pop_1952 pop_2007
##    &lt;fct&gt;          &lt;dbl&gt;    &lt;dbl&gt;
##  1 Afghanistan    8.43    31.9  
##  2 Albania        1.28     3.60 
##  3 Algeria        9.28    33.3  
##  4 Angola         4.23    12.4  
##  5 Argentina     17.9     40.3  
##  6 Australia      8.69    20.4  
##  7 Austria        6.93     8.20 
##  8 Bahrain        0.120    0.709
##  9 Bangladesh    46.9    150.   
## 10 Belgium        8.73    10.4  
## # ... with 132 more rows
</code></pre><p>With the data being ready, let&rsquo;s create a simple chart.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">dumbbell_chart</span><span class="p">(</span><span class="n">gapminder_wide</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">pop_1952</span><span class="p">,</span> <span class="n">pop_2007</span><span class="p">,</span>
               <span class="n">limit</span> <span class="o">=</span> <span class="m">10</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>That looks already quite nice but let&rsquo;s customize the plot to make it look even better. First, let&rsquo;s see which customizations can be done by changing the defaults of <code>dumbbell_chart()</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">&lt;-</span> <span class="nf">dumbbell_chart</span><span class="p">(</span><span class="n">gapminder_wide</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">pop_1952</span><span class="p">,</span> <span class="n">pop_2007</span><span class="p">,</span>
                        <span class="n">limit</span> <span class="o">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">point_size</span> <span class="o">=</span> <span class="m">5</span><span class="p">,</span>
                        <span class="n">point_colors</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;lightgray&#34;</span><span class="p">,</span> <span class="s">&#34;black&#34;</span><span class="p">),</span>
                        <span class="n">legend_labels</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;1952&#34;</span><span class="p">,</span> <span class="s">&#34;2007&#34;</span><span class="p">))</span>
<span class="n">chart</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>To further customize the plot you can use <code>ggplot2</code> functions.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">scale_y_continuous</span><span class="p">(</span><span class="n">expand</span> <span class="o">=</span> <span class="nf">expand_scale</span><span class="p">(</span><span class="n">mult</span> <span class="o">=</span> <span class="m">.025</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nf">element_text</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="m">14</span><span class="p">),</span>
    <span class="n">plot.caption</span> <span class="o">=</span> <span class="nf">element_text</span><span class="p">(</span><span class="n">family</span> <span class="o">=</span> <span class="s">&#34;mono&#34;</span><span class="p">)</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">labs</span><span class="p">(</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;The World is Growing&#34;</span><span class="p">,</span>
    <span class="n">subtitle</span> <span class="o">=</span> <span class="s">&#34;Top 10 Most Populated Countries in 2007&#34;</span><span class="p">,</span>
    <span class="n">caption</span> <span class="o">=</span> <span class="s">&#34;Chart created using #ggcharts&#34;</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">xlab</span><span class="p">(</span><span class="kc">NULL</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">ylab</span><span class="p">(</span><span class="s">&#34;Population (Millions)&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Changing things up with ggplot2 themes</title>
			<link>/posts/changing-things-up-with-ggplot2-themes/</link>
			<pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/changing-things-up-with-ggplot2-themes/</guid>
			<description>Are you tired of adding your favorite ggplot2 theme to every data visualization you create in R? Then I have a solution for you!
Before you start to create any plots call the theme_set() function with your favorite theme as first argument, e.g.
library(ggplot2)theme_set(theme_minimal())That will ensure all plots you subsequently create will use this theme unless you add a different one.
data(&amp;#34;mtcars&amp;#34;)ggplot(mtcars, aes(hp, mpg, color = wt)) +geom_point()Very handy for lazy people like me.</description>
			<content type="html"><![CDATA[<p>Are you tired of adding your favorite <code>ggplot2</code> theme to every data visualization you create in <code>R</code>? Then I have a solution for you!</p>
<p>Before you start to create any plots call the <code>theme_set()</code> function with your favorite theme as first argument, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">theme_set</span><span class="p">(</span><span class="nf">theme_minimal</span><span class="p">())</span>
</code></pre></div><p>That will ensure all plots you subsequently create will use this theme unless you add a different one.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="s">&#34;mtcars&#34;</span><span class="p">)</span>
<span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Very handy for lazy people like me.</p>
]]></content>
		</item>
		
		<item>
			<title>Turning your ggplot2 code into a function</title>
			<link>/posts/turning-your-ggplot2-code-into-a-function/</link>
			<pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/turning-your-ggplot2-code-into-a-function/</guid>
			<description>If you find yourself repeatedly writing the same ggplot2 code to create a data visualization in R, then it&amp;rsquo;s time to put your code into a function.
You may start out with an implementation similar to this one.
library(ggplot2)data(&amp;#34;mtcars&amp;#34;)scatter_plot &amp;lt;- function(data, x, y) {ggplot(data, aes(x, y)) +geom_point()}That won&amp;rsquo;t work though.
scatter_plot(mtcars, hp, mpg)## Error in FUN(X[[i]], ...): object &#39;hp&#39; not foundIf you call this function, R will look for a variable called hp rather than looking for a column with that name inside the data frame you passed as the first argument.</description>
			<content type="html"><![CDATA[<p>If you find yourself repeatedly writing the same <code>ggplot2</code> code to create a data visualization in <code>R</code>, then it&rsquo;s time to put your code into a function.</p>
<p>You may start out with an implementation similar to this one.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="s">&#34;mtcars&#34;</span><span class="p">)</span>

<span class="n">scatter_plot</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="o">+</span>
    <span class="nf">geom_point</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><p>That won&rsquo;t work though.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">scatter_plot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div><pre><code>## Error in FUN(X[[i]], ...): object 'hp' not found
</code></pre><p>If you call this function, <code>R</code> will look for a variable called <code>hp</code> rather than looking for a column with that name inside the data frame you passed as the first argument.</p>
<p>So, maybe it works when putting the column names in quotes?</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">scatter_plot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="s">&#34;hp&#34;</span><span class="p">,</span> <span class="s">&#34;mpg&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Well, no error this time but that most likely did not produce what you expected.</p>
<p>The key to making this work is to tell <code>R</code>  somehow that it should look for the <code>x</code> and <code>y</code> arguments inside data. How can you achieve this? Using <code>{{ }}</code> (speak curly-curly) from the <code>rlang</code> package.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">scatter_plot2</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nf">aes</span><span class="p">({{</span><span class="n">x</span><span class="p">}},</span> <span class="p">{{</span><span class="n">y</span><span class="p">}}))</span> <span class="o">+</span>
    <span class="nf">geom_point</span><span class="p">()</span>
<span class="p">}</span>
<span class="nf">scatter_plot2</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>There you have it: that&rsquo;s how you can create your own custom plotting function on top of <code>ggplot2</code>.</p>
<p>Want to see the power of custom plotting functions in action? Make sure to check out my <a href="https://github.com/thomas-neitmann/ggcharts"><code>ggcharts</code></a> package.</p>
]]></content>
		</item>
		
		<item>
			<title>Renaming files in a git repository</title>
			<link>/posts/renaming-files-in-a-git-repository/</link>
			<pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/renaming-files-in-a-git-repository/</guid>
			<description>If you are using git for your data science project (which you should!), you have to be careful when renaming a file.
If you simply rename the file in your OS file browser, git would interpret this as deleting the file with the old name and creating a new one with the new name. They wouldn&amp;rsquo;t be linked in any way and you&amp;rsquo;d essentially loose the history of that file.</description>
			<content type="html"><![CDATA[<p>If you are using <code>git</code> for your data science project (which you should!), you have to be careful when renaming a file.</p>
<p>If you simply rename the file in your OS file browser, <code>git</code> would interpret this as deleting the file with the old name and creating a new one with the new name. They wouldn&rsquo;t be linked in any way and you&rsquo;d essentially loose the history of that file.</p>
<p>So, how can you rename a file and keep its history? You need to use the <code>git mv</code> command and subsequently make a commit. Here&rsquo;s an example:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git mv old_name.ext new_name.ext
git commit -m <span class="s1">&#39;Rename old_name.ext to new_name.txt&#39;</span>
</code></pre></div><p>That&rsquo;s it! Don&rsquo;t be afraid to rename a file when using <code>git</code>. Just use the right command.</p>
]]></content>
		</item>
		
		<item>
			<title>Is a library the same thing as a package?</title>
			<link>/posts/is-a-library-the-same-thing-as-a-package/</link>
			<pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/is-a-library-the-same-thing-as-a-package/</guid>
			<description>In R you use the library() function to load a package. Thus, surely a package and a library must be the same thing, right?
Actually no, they are not!
So, what&amp;rsquo;s the difference between the two? A library is nothing but a folder on your computer in which installed packages are saved. Just like a real library that contains books. It is merely a container. A library on its own is useless.</description>
			<content type="html"><![CDATA[<p>In <code>R</code> you use the <code>library()</code> function to load a package. Thus, surely a package and a library must be the same thing, right?</p>
<p>Actually no, they are not!</p>
<p>So, what&rsquo;s the difference between the two? A library is nothing but a folder on your computer in which installed packages are saved. Just like a real library that contains books. It is merely a container. A library on its own is useless. It&rsquo;s the content, the packages, that gives you the power to do almost anything in <code>R</code>.</p>
<p>If you are using <code>R</code> on Windows you&rsquo;ll likely have two libraries. One system wide library containing all packages that come with <code>R</code> and a user library that contains all packages you have installed on top of the defaults.</p>
<p>To see which libraries you are using use</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">.libPaths</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] &quot;C:/Users/neitmant/R-Portable/App/R-Portable/library&quot;
</code></pre><p>You can use the same function to tell <code>R</code> that a certain folder on your computer should be considered a library, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">.libPaths</span><span class="p">(</span><span class="s">&#34;./library&#34;</span><span class="p">)</span>
</code></pre></div><p>Be aware, though, that this will overwrite your default libraries. To add an additional library on top of the existing ones you need to be explicit.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">old_libraries</span> <span class="o">&lt;-</span> <span class="nf">.libPaths</span><span class="p">()</span>
<span class="nf">.libPaths</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s">&#34;./library&#34;</span><span class="p">,</span> <span class="n">old_libraries</span><span class="p">))</span>
</code></pre></div><p>With that being said you know why I invetiable have to smile if I see an article about the top five <code>R</code> libraries for xyz.</p>
]]></content>
		</item>
		
		<item>
			<title>Enhacing ggplot2 with ggtext</title>
			<link>/posts/enhacing-ggplot2-with-ggtext/</link>
			<pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/enhacing-ggplot2-with-ggtext/</guid>
			<description>I am super exciting to share with you my recent &amp;ldquo;discovery&amp;rdquo; of the ggtext R package.
I had looked for a solution to color individual words in the title of a ggplot2 data visualization and ggtext provided me with a great solution for doing just that (and more).
So, how does it work? Have a look at this example:
library(ggplot2)library(dplyr)library(gapminder)data(gapminder)gapminder %&amp;gt;%filter(continent %in% c(&amp;#34;Africa&amp;#34;, &amp;#34;Europe&amp;#34;)) %&amp;gt;%group_by(continent, year) %&amp;gt;%summarise(population = sum(pop / 1e9)) %&amp;gt;%ggplot(aes(year, population, color = continent)) +geom_line(size = 1.</description>
			<content type="html"><![CDATA[<p>I am super exciting to share with you my recent &ldquo;discovery&rdquo; of the <code>ggtext</code> <code>R</code> package.</p>
<p>I had looked for a solution to color individual words in the title of a <code>ggplot2</code> data visualization and <code>ggtext</code> provided me with a great solution for doing just that (and more).</p>
<p>So, how does it work? Have a look at this example:</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>

<span class="n">gapminder</span> <span class="o">%&gt;%</span>
  <span class="nf">filter</span><span class="p">(</span><span class="n">continent</span> <span class="o">%in%</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;Africa&#34;</span><span class="p">,</span> <span class="s">&#34;Europe&#34;</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">continent</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">summarise</span><span class="p">(</span><span class="n">population</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">pop</span> <span class="o">/</span> <span class="m">1e9</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">continent</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_line</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="m">1.2</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">ggtitle</span><span class="p">(</span>
    <span class="nf">paste0</span><span class="p">(</span>
      <span class="s">&#34;&lt;span style = &#39;color:#FF7F0E&#39;&gt;**Africa**&lt;/span&gt;&#34;</span><span class="p">,</span>
      <span class="s">&#34; outgrew &lt;span style = &#39;color:#1F77B4&#39;&gt;**Europe**&lt;/span&gt;&#34;</span><span class="p">,</span>
      <span class="s">&#34; *dramtically* in the 20th Century&#34;</span>
    <span class="p">)</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">scale_color_manual</span><span class="p">(</span><span class="n">values</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;Europe&#34;</span> <span class="o">=</span> <span class="s">&#34;#1F77B4&#34;</span><span class="p">,</span> <span class="s">&#34;Africa&#34;</span> <span class="o">=</span> <span class="s">&#34;#FF7F0E&#34;</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span>
    <span class="n">plot.title</span> <span class="o">=</span> <span class="n">ggtext</span><span class="o">::</span><span class="nf">element_markdown</span><span class="p">(),</span>
    <span class="n">legend.position</span> <span class="o">=</span> <span class="s">&#34;none&#34;</span>
  <span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Inside <code>theme()</code> I am assigning <code>ggtext::element_markdown()</code> to <code>plot.title</code>. This has the effect that the plot title I created using <code>ggtitle()</code> is interpreted as markdown/HTML. That made it possible to have the title of the plot act as a legend by coloring the appropriate keywords.</p>
<p>Quite a neat solution, isn&rsquo;t it?</p>
<p>While you need to revert to HTML for coloring the text you can use markdown for making individual words bold (e.g. <code>**Europe**</code>), italics (e.g. <code>*dramatically*</code>) and so forth. I love the flexibility this offers.</p>
<p>The <code>ggtext</code> package is not yet available on CRAN but you can install it from GitHub using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">remotes</span><span class="o">::</span><span class="nf">install_github</span><span class="p">(</span><span class="s">&#34;wilkelab/ggtext&#34;</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Creating excel files from R using openxlsx</title>
			<link>/posts/creating-excel-files-from-r-using-openxlsx/</link>
			<pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/creating-excel-files-from-r-using-openxlsx/</guid>
			<description>Yesterday I had to share data with some internal stakeholders in excel format. Why excel? Well, I guess if you are not a &amp;ldquo;data professional&amp;rdquo;, then that&amp;rsquo;s the easiest format to work with.
So, I started R, read in the dataset, did some data wrangling and then wanted to write the data to a xlsx file. I heard great things about the openxlsx package so I used it for the first time.</description>
			<content type="html"><![CDATA[<p>Yesterday I had to share data with some internal stakeholders in excel format. Why excel? Well, I guess if you are not a &ldquo;data professional&rdquo;, then that&rsquo;s the easiest format to work with.</p>
<p>So, I started <code>R</code>, read in the dataset, did some data wrangling and then wanted to write the data to a xlsx file. I heard great things about the <code>openxlsx</code> package so I used it for the first time. My initial attempt was using the <code>write.xlsx()</code> function. That certainly did the job but the resulting file didn&rsquo;t look how I like my excel files. I am a fan of a freezed top row with bold and centered column headers.</p>
<p>I digged a bit into the <code>openxlsx</code> documentation and it turned out that the package can do all of this. Great!</p>
<p>Here is the code I used (obviously not exporting the mtcars dataset):</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">openxlsx</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>

<span class="n">header_style</span> <span class="o">&lt;-</span> <span class="nf">createStyle</span><span class="p">(</span><span class="n">halign</span> <span class="o">=</span> <span class="s">&#34;center&#34;</span><span class="p">,</span> <span class="n">textDecoration</span> <span class="o">=</span> <span class="s">&#34;bold&#34;</span><span class="p">)</span>

<span class="n">wb</span> <span class="o">&lt;-</span> <span class="nf">createWorkbook</span><span class="p">()</span>

<span class="nf">addWorksheet</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">)</span>
<span class="nf">writeData</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">mtcars</span><span class="p">,</span> <span class="n">headerStyle</span> <span class="o">=</span> <span class="n">header_style</span><span class="p">)</span>
<span class="nf">freezePane</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">firstRow</span> <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span>
<span class="nf">setColWidths</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">cols</span> <span class="o">=</span> <span class="m">1</span><span class="o">:</span><span class="nf">ncol</span><span class="p">(</span><span class="n">mtcars</span><span class="p">),</span> <span class="n">widths</span> <span class="o">=</span> <span class="s">&#34;auto&#34;</span><span class="p">)</span>
<span class="nf">saveWorkbook</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&#34;mtcars.xlsx&#34;</span><span class="p">,</span> <span class="n">overwrite</span> <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span>
</code></pre></div><p>The only thing that didn&rsquo;t quite work was adjusting the column width to fit the content. While there is a <code>setColWidths()</code> function where you can set the <code>widths</code> parameter to <code>&quot;auto&quot;</code> that didn&rsquo;t work a 100%. It <em>did</em> look much better than having all columns in the standard width, though. In the end that was good enough for me.</p>
]]></content>
		</item>
		
		<item>
			<title>The right way to check for NAs</title>
			<link>/posts/the-right-way-to-check-for-nas/</link>
			<pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/the-right-way-to-check-for-nas/</guid>
			<description>To check for missing values in R you might be tempted to use the equality operator == with your vector on one side and NA on the other. Don&amp;rsquo;t!
If you insist, you&amp;rsquo;ll get a useless results.
x &amp;lt;- c(1, NA, 3)x == NA## [1] NA NA NAInstead use the is.na() function.
is.na(x)## [1] FALSE TRUE FALSE</description>
			<content type="html"><![CDATA[<p>To check for missing values in <code>R</code> you might be tempted to use the equality operator <code>==</code> with your vector on one side and <code>NA</code> on the other. Don&rsquo;t!</p>
<p>If you insist, you&rsquo;ll get a useless results.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&lt;-</span> <span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="kc">NA</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
<span class="n">x</span> <span class="o">==</span> <span class="kc">NA</span>
</code></pre></div><pre><code>## [1] NA NA NA
</code></pre><p>Instead use the <code>is.na()</code> function.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">is.na</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>## [1] FALSE  TRUE FALSE
</code></pre>]]></content>
		</item>
		
		<item>
			<title>What does the &lt;&lt;- operator do?</title>
			<link>/posts/what-does-the-operator-do/</link>
			<pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/what-does-the-operator-do/</guid>
			<description>If you&amp;rsquo;ve been using R for a while, chances are high you came across the &amp;lt;&amp;lt;- operator. On several occasions I&amp;rsquo;ve heard or read people calling &amp;lt;&amp;lt;- the &amp;ldquo;global assignment operator&amp;rdquo;. However, this is wrong. Let me elaborate why.
First, have a look at this example.
x &amp;lt;- 0foo &amp;lt;- function() {x &amp;lt;&amp;lt;- x + 1x}foo()## [1] 1foo()## [1] 2x## [1] 2Here &amp;lt;&amp;lt;- truly behaves like a global assignment operator.</description>
			<content type="html"><![CDATA[<p>If you&rsquo;ve been using <code>R</code> for a while, chances are high you came across the <code>&lt;&lt;-</code> operator. On several occasions I&rsquo;ve heard or read people calling <code>&lt;&lt;-</code> the &ldquo;global assignment operator&rdquo;. However, this is wrong. Let me elaborate why.</p>
<p>First, have a look at this example.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&lt;-</span> <span class="m">0</span>
<span class="n">foo</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">x</span> <span class="o">&lt;&lt;-</span> <span class="n">x</span> <span class="o">+</span> <span class="m">1</span>
  <span class="n">x</span>
<span class="p">}</span>
<span class="nf">foo</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] 1
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">foo</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] 2
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">x</span>
</code></pre></div><pre><code>## [1] 2
</code></pre><p>Here <code>&lt;&lt;-</code> truly behaves like a global assignment operator. Every time you call <code>foo()</code> the variable <code>x</code> in the global environment is incremented by 1. So far so good.</p>
<p>If you look at the next example, though, you&rsquo;ll see that <code>&lt;&lt;-</code> does <em>not</em> always assign to the global environment.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">y</span> <span class="o">&lt;-</span> <span class="m">0</span>
<span class="n">bar</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">y</span> <span class="o">&lt;-</span> <span class="m">99</span>
  <span class="n">bla</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">y</span> <span class="o">&lt;&lt;-</span> <span class="n">y</span> <span class="o">+</span> <span class="m">1</span>
  <span class="p">}</span>
  <span class="nf">bla</span><span class="p">()</span>
  <span class="n">y</span>
<span class="p">}</span>

<span class="nf">bar</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] 100
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">y</span>
</code></pre></div><pre><code>## [1] 0
</code></pre><p>Instead, it assigns the value to the variable in the enclosing environment, i.e. the environment in which the function was created. It just happens to be that in the first example the enclosing environment was the global environment. In the second example that is not the case and so the variable <code>y</code> in the global environment is unaffected by calling <code>bar()</code>.</p>
<p>If you&rsquo;d truly want to assign a value to a variable in the global environment you&rsquo;d have to do something like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">.GlobalEnv</span><span class="o">$</span><span class="n">x</span> <span class="o">&lt;-</span> <span class="m">100</span>
</code></pre></div><p>But, carefully think whether or not you really want to work with global variables (most of the time there are better solutions).</p>
]]></content>
		</item>
		
		<item>
			<title>Loading vs. attaching a package</title>
			<link>/posts/loading-vs-attaching-a-package/</link>
			<pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/loading-vs-attaching-a-package/</guid>
			<description>R users often talk of loading a package when they use library(). But technical library() doesn&amp;rsquo;t load the package but attaches it. So what&amp;rsquo;s the difference?
If you&amp;rsquo;ve ever used the :: operator, e.g. dplyr::filter(), you have loaded a package. Loading a package does exactly what the name suggests: it loads all functions and datasets of a particular package. However, to access these functions and datasets you will still need to use :: every time you refer to something within the package.</description>
			<content type="html"><![CDATA[<p><code>R</code> users often talk of loading a package when they use <code>library()</code>. But technical <code>library()</code> doesn&rsquo;t load the package but attaches it. So what&rsquo;s the difference?</p>
<p>If you&rsquo;ve ever used the <code>::</code> operator, e.g. <code>dplyr::filter()</code>, you have loaded a package. Loading a package does exactly what the name suggests: it loads all functions and datasets of a particular package. However, to access these functions and datasets you will still need to use <code>::</code> every time you refer to something within the package.</p>
<p>When you use <code>library()</code> the package is attached to the search path. You can think of the search path as a queue of (literally) packages, each one filled with functions and datasets. Whenever you use a function without <code>::</code>, <code>R</code> looks for a function with that name in the first package. If it doesn&rsquo;t find it, <code>R</code> continues to look for it in the next package and so on until it finds the function.</p>
<p>Importantly, calling <code>library(pkg)</code> will place <code>pkg</code> at the beginning of the queue. That&rsquo;s why after calling <code>library(dplyr)</code>, <code>filter()</code> will be <code>dplyr::filter()</code> and not <code>stats::filter()</code> any longer.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">args</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span> <span class="c1"># stats::filter</span>
</code></pre></div><pre><code>## function (x, filter, method = c(&quot;convolution&quot;, &quot;recursive&quot;), 
##     sides = 2L, circular = FALSE, init = NULL) 
## NULL
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">args</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span> <span class="c1"># dplyr::filter</span>
</code></pre></div><pre><code>## function (.data, ..., .preserve = FALSE) 
## NULL
</code></pre><p>This behavior can cause trouble, so if you know there&rsquo;s a function with the same name in multiple packages I&rsquo;d advice you to be explicit and use <code>::</code> every time you use that function.</p>
]]></content>
		</item>
		
		<item>
			<title>How to add a regression line to a ggplot?</title>
			<link>/posts/how-to-add-a-regression-line-to-a-ggplot/</link>
			<pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/how-to-add-a-regression-line-to-a-ggplot/</guid>
			<description>library(ggplot2)data(mtcars)Step 1 p &amp;lt;- ggplot(mtcars, aes(hp, wt)) +geom_point()pStep 2 p + geom_smooth()Step 3 p + geom_smooth(method = &amp;#34;lm&amp;#34;)Putting it all together ggplot(mtcars, aes(hp, wt)) +geom_point() +geom_smooth(method = &amp;#34;lm&amp;#34;)</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>
</code></pre></div><h3 id="step-1">Step 1</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">p</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
<span class="n">p</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="step-2">Step 2</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">p</span> <span class="o">+</span> <span class="nf">geom_smooth</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="step-3">Step 3</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">p</span> <span class="o">+</span> <span class="nf">geom_smooth</span><span class="p">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">&#34;lm&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="putting-it-all-together">Putting it all together</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span> <span class="o">+</span>
  <span class="nf">geom_smooth</span><span class="p">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">&#34;lm&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Adjusting only the upper or lower axis limit using ggplot2</title>
			<link>/posts/adjusting-only-the-upper-or-lower-axis-limit-using-ggplot2/</link>
			<pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/adjusting-only-the-upper-or-lower-axis-limit-using-ggplot2/</guid>
			<description>If you want to change only the lower or upper bound of your plot axis pass NA for the value you don&amp;rsquo;t want to set inside either xlim() or ylim().
library(ggplot2)library(patchwork)data(mtcars)p1 &amp;lt;- ggplot(mtcars, aes(factor(cyl), hp)) +geom_boxplot()p2 &amp;lt;- p1 + ylim(0, NA)p3 &amp;lt;- p1 + ylim(NA, 400)p1 | p2 | p3</description>
			<content type="html"><![CDATA[<p>If you want to change only the lower or upper bound of your plot axis pass <code>NA</code> for the value you don&rsquo;t want to set inside either <code>xlim()</code> or <code>ylim()</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">patchwork</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>

<span class="n">p1</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="nf">factor</span><span class="p">(</span><span class="n">cyl</span><span class="p">),</span> <span class="n">hp</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_boxplot</span><span class="p">()</span>
<span class="n">p2</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">+</span> <span class="nf">ylim</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="kc">NA</span><span class="p">)</span>
<span class="n">p3</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">+</span> <span class="nf">ylim</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span> <span class="m">400</span><span class="p">)</span>

<span class="n">p1</span> <span class="o">|</span> <span class="n">p2</span> <span class="o">|</span> <span class="n">p3</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>When things go wrong: how to amend a git commit?</title>
			<link>/posts/when-things-go-wrong-how-to-amend-a-git-commit/</link>
			<pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/when-things-go-wrong-how-to-amend-a-git-commit/</guid>
			<description>While working on a data science project did you ever git commit a bunch of .R files only to realize a few seconds later that you forget to include something? I certainly did. Today alone 3 times.
What can you do? The obvious solution is to make a second commit. But that&amp;rsquo;s a bad one. Instead do the following:
git add &amp;lt;forgotten.file&amp;gt;git commit --amend --no-editReplace &amp;lt;forgotten.file&amp;gt; with the actual file name, e.</description>
			<content type="html"><![CDATA[<p>While working on a data science project did you ever <code>git commit</code> a bunch of <code>.R</code> files only to realize a few seconds later that you forget to include something? I certainly did. Today alone 3 times.</p>
<p>What can you do? The obvious solution is to make a second commit. But that&rsquo;s a bad one. Instead do the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git add &lt;forgotten.file&gt;
git commit --amend --no-edit
</code></pre></div><p>Replace <code>&lt;forgotten.file&gt;</code> with the actual file name, e.g. <code>analysis.R</code>. This will add the file to your previous commit while keeping the commit message. If you want to change the commit message remove the <code>--no-edit</code> argument. When you do so a text editor will pop up where you can change the commit message.</p>
<p>Another scenario: you committed all files but forgot to make a change in one file. In that case simply edit the respective file and run the exact same two commands as above. Make sure to replace <code>&lt;forgotten.file&gt;</code> with the name of the file you just edited.</p>
<p>Finally to push the commit to GitHub run</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git push -f origin &lt;your branch&gt;
</code></pre></div><p>where <code>&lt;your branch&gt;</code> is the branch you are currently working in, e.g. <code>master</code>.</p>
<p>A note to RStudio users: you need to run the <code>git</code> commands from the terminal instead of using the <code>git</code> GUI.</p>
]]></content>
		</item>
		
	</channel>
</rss>
