<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>bytesized on Thomas&#39; adventuRe</title>
		<link>/categories/bytesized/</link>
		<description>Recent content in bytesized on Thomas&#39; adventuRe</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 06 Apr 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="/categories/bytesized/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Adding labels to a ggplot2 bar chart</title>
			<link>/posts/labels-ggplot2-bar-chart/</link>
			<pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/labels-ggplot2-bar-chart/</guid>
			<description>&lt;p&gt;I often see bar charts where the bars are directly labeled with the value they represent. In this post I will walk you through how you can create such labeled bar charts using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The data I will use comes from the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted&#34;&gt;2019 Stackoverflow Developer Survey&lt;/a&gt;. To make creating the plot easier I will use the &lt;code&gt;bar_chart()&lt;/code&gt; function from my &lt;a href=&#34;https://thomas-neitmann.github.io/ggcharts/index.html&#34;&gt;&lt;code&gt;ggcharts&lt;/code&gt;&lt;/a&gt; package which outputs a &lt;code&gt;ggplot&lt;/code&gt; that can be customized further using any &lt;code&gt;ggplot2&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dplyr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggplot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggcharts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;dreaded_lang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tibble&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;tribble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;VBA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;75.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Objective-C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;68.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Assembly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;64.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;PHP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;54.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Erlang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;52.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Ruby&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;49.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;48.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;48.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;46.6&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dreaded_lang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;bar_chart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;To add an annotation to the bars you&amp;rsquo;ll have to use either &lt;code&gt;geom_text()&lt;/code&gt; or &lt;code&gt;geom_label()&lt;/code&gt;. I will start off with the former. Both require the &lt;code&gt;label&lt;/code&gt; aesthetic which tells &lt;code&gt;ggplot2&lt;/code&gt; which text to actually display. In addition, both functions require the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; aesthetics but these are already set when using &lt;code&gt;bar_chart()&lt;/code&gt; so I won&amp;rsquo;t bother setting them explicitly after this first example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;By default the labels are center-aligned directly at the &lt;code&gt;y&lt;/code&gt; value. You will never want to leave it like that because it&amp;rsquo;s quite hard to read. To left-align the labels set the &lt;code&gt;hjust&lt;/code&gt; parameter to &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;&amp;quot;left&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s still not ideal I would say. Let&amp;rsquo;s move the labels a bit further away from the bars by setting &lt;code&gt;hjust&lt;/code&gt; to a negative number and increase the axis limits to improve the legibility of the label of the top most bar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;-0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;ylim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, you may want to have the labels inside the bars.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Again, a bit close to the end of the bars. By increasing the &lt;code&gt;hjust&lt;/code&gt; value the labels can be moved further to the left. In addition, black on blue is quite hard to read so let&amp;rsquo;s change the text color to white. Notice that this happens outside of &lt;code&gt;aes()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Next, let&amp;rsquo;s try &lt;code&gt;geom_label()&lt;/code&gt; for once to see how it&amp;rsquo;s different from &lt;code&gt;geom_text()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;I am not a fan of this look and will stick to &lt;code&gt;geom_text()&lt;/code&gt; for the final plot.&lt;/p&gt;
&lt;p&gt;As the data in the plot represents percentages it&amp;rsquo;s best practice to have the labels include the percentage sign. In addition, let&amp;rsquo;s highlight our favorite language &lt;code&gt;R&lt;/code&gt; and add title, footnotes etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;dreaded_lang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;mutate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%1.1f%%&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;bar_chart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;highlight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar_color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;-0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;scale_y_continuous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;limits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;expansion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;labs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Developers Who are Developing with the Language but&amp;lt;br&amp;gt;Have not Expressed Interest in Continuing to Do so&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Top 10 Most Dreaded Programming Languages&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;subtitle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*R Placed 8th*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;caption&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Source: Stackoverflow Developer Survey 2019&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;mdthemes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;md_theme_classic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;axis.text.x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_blank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;axis.line.x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_blank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;axis.ticks.x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_blank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Notice how easy it was to highlight a single bar thanks to &lt;a href=&#34;https://thomas-neitmann.github.io/ggcharts/index.html&#34;&gt;&lt;code&gt;ggcharts&lt;/code&gt;&lt;/a&gt;. In addition, I used my &lt;a href=&#34;https://github.com/thomas-neitmann/mdthemes&#34;&gt;&lt;code&gt;mdthemes&lt;/code&gt;&lt;/a&gt; package which provides themes that interpret text as markdown. That way is was super easy to get the subtitle in &lt;em&gt;italics&lt;/em&gt;. Furthermore, I removed the axis labels and grid lines. In my opinion you should &lt;strong&gt;&lt;em&gt;never&lt;/em&gt;&lt;/strong&gt; have an axis and labels in the same plot.&lt;/p&gt;
&lt;p&gt;To finish off this post, let&amp;rsquo;s have a quick look at how to label a vertical bar chart. It&amp;rsquo;s basically the same process but instead of using &lt;code&gt;hjust&lt;/code&gt; you will need to use &lt;code&gt;vjust&lt;/code&gt; to adjust the label position.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;biomedicalrevenue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;biomedicalrevenue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;company&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Novartis&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;mutate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$%1.2f B.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;revenue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;column_chart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;revenue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;axis.text.y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_blank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;panel.grid.major.y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_blank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;scale_x_continuous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Fiscal Year&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;breaks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2011&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;scale_y_continuous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Revenue (Billion USD)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;limits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;expansion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>I often see bar charts where the bars are directly labeled with the value they represent. In this post I will walk you through how you can create such labeled bar charts using <code>ggplot2</code>.</p>
<p>The data I will use comes from the <a href="https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted">2019 Stackoverflow Developer Survey</a>. To make creating the plot easier I will use the <code>bar_chart()</code> function from my <a href="https://thomas-neitmann.github.io/ggcharts/index.html"><code>ggcharts</code></a> package which outputs a <code>ggplot</code> that can be customized further using any <code>ggplot2</code> function.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">ggcharts</span><span class="p">)</span>

<span class="n">dreaded_lang</span> <span class="o">&lt;-</span> <span class="n">tibble</span><span class="o">::</span><span class="nf">tribble</span><span class="p">(</span>
  <span class="o">~</span><span class="n">language</span><span class="p">,</span> <span class="o">~</span><span class="n">pct</span><span class="p">,</span>
  <span class="s">&#34;VBA&#34;</span><span class="p">,</span> <span class="m">75.2</span><span class="p">,</span>
  <span class="s">&#34;Objective-C&#34;</span><span class="p">,</span> <span class="m">68.7</span><span class="p">,</span>
  <span class="s">&#34;Assembly&#34;</span><span class="p">,</span> <span class="m">64.4</span><span class="p">,</span>
  <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="m">57.5</span><span class="p">,</span>
  <span class="s">&#34;PHP&#34;</span><span class="p">,</span> <span class="m">54.2</span><span class="p">,</span>
  <span class="s">&#34;Erlang&#34;</span><span class="p">,</span> <span class="m">52.6</span><span class="p">,</span>
  <span class="s">&#34;Ruby&#34;</span><span class="p">,</span> <span class="m">49.7</span><span class="p">,</span>
  <span class="s">&#34;R&#34;</span><span class="p">,</span> <span class="m">48.3</span><span class="p">,</span>
  <span class="s">&#34;C++&#34;</span><span class="p">,</span> <span class="m">48.0</span><span class="p">,</span>
  <span class="s">&#34;Java&#34;</span><span class="p">,</span> <span class="m">46.6</span>
<span class="p">)</span>

<span class="n">chart</span> <span class="o">&lt;-</span> <span class="n">dreaded_lang</span> <span class="o">%&gt;%</span>
  <span class="nf">bar_chart</span><span class="p">(</span><span class="n">language</span><span class="p">,</span> <span class="n">pct</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">print</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>To add an annotation to the bars you&rsquo;ll have to use either <code>geom_text()</code> or <code>geom_label()</code>. I will start off with the former. Both require the <code>label</code> aesthetic which tells <code>ggplot2</code> which text to actually display. In addition, both functions require the <code>x</code> and <code>y</code> aesthetics but these are already set when using <code>bar_chart()</code> so I won&rsquo;t bother setting them explicitly after this first example.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">language</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">pct</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="n">pct</span><span class="p">))</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>By default the labels are center-aligned directly at the <code>y</code> value. You will never want to leave it like that because it&rsquo;s quite hard to read. To left-align the labels set the <code>hjust</code> parameter to <code>0</code> or <code>&quot;left&quot;</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">pct</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="s">&#34;left&#34;</span><span class="p">))</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>That&rsquo;s still not ideal I would say. Let&rsquo;s move the labels a bit further away from the bars by setting <code>hjust</code> to a negative number and increase the axis limits to improve the legibility of the label of the top most bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">pct</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="m">-0.2</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">ylim</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Alternatively, you may want to have the labels inside the bars.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">pct</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="m">1</span><span class="p">))</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Again, a bit close to the end of the bars. By increasing the <code>hjust</code> value the labels can be moved further to the left. In addition, black on blue is quite hard to read so let&rsquo;s change the text color to white. Notice that this happens outside of <code>aes()</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">pct</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="m">1.2</span><span class="p">),</span> <span class="n">color</span> <span class="o">=</span> <span class="s">&#34;white&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Next, let&rsquo;s try <code>geom_label()</code> for once to see how it&rsquo;s different from <code>geom_text()</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">geom_label</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">pct</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="m">1.2</span><span class="p">))</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>I am not a fan of this look and will stick to <code>geom_text()</code> for the final plot.</p>
<p>As the data in the plot represents percentages it&rsquo;s best practice to have the labels include the percentage sign. In addition, let&rsquo;s highlight our favorite language <code>R</code> and add title, footnotes etc.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">dreaded_lang</span> <span class="o">%&gt;%</span>
  <span class="nf">mutate</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="nf">sprintf</span><span class="p">(</span><span class="s">&#34;%1.1f%%&#34;</span><span class="p">,</span> <span class="n">pct</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">bar_chart</span><span class="p">(</span><span class="n">language</span><span class="p">,</span> <span class="n">pct</span><span class="p">,</span> <span class="n">highlight</span> <span class="o">=</span> <span class="s">&#34;R&#34;</span><span class="p">,</span> <span class="n">bar_color</span> <span class="o">=</span> <span class="s">&#34;black&#34;</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">label</span><span class="p">,</span> <span class="n">hjust</span> <span class="o">=</span> <span class="m">-0.1</span><span class="p">),</span> <span class="n">size</span> <span class="o">=</span> <span class="m">5</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">scale_y_continuous</span><span class="p">(</span>
    <span class="n">limits</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">100</span><span class="p">),</span>
    <span class="n">expand</span> <span class="o">=</span> <span class="nf">expansion</span><span class="p">()</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">labs</span><span class="p">(</span>
    <span class="n">x</span> <span class="o">=</span> <span class="kc">NULL</span><span class="p">,</span>
    <span class="n">y</span> <span class="o">=</span> <span class="s">&#34;Developers Who are Developing with the Language but&lt;br&gt;Have not Expressed Interest in Continuing to Do so&#34;</span><span class="p">,</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Top 10 Most Dreaded Programming Languages&#34;</span><span class="p">,</span>
    <span class="n">subtitle</span> <span class="o">=</span> <span class="s">&#34;*R Placed 8th*&#34;</span><span class="p">,</span>
    <span class="n">caption</span> <span class="o">=</span> <span class="s">&#34;Source: Stackoverflow Developer Survey 2019&#34;</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="n">mdthemes</span><span class="o">::</span><span class="nf">md_theme_classic</span><span class="p">(</span><span class="n">base_size</span> <span class="o">=</span> <span class="m">14</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span>
    <span class="n">axis.text.x</span> <span class="o">=</span> <span class="nf">element_blank</span><span class="p">(),</span>
    <span class="n">axis.line.x</span> <span class="o">=</span> <span class="nf">element_blank</span><span class="p">(),</span>
    <span class="n">axis.ticks.x</span> <span class="o">=</span> <span class="nf">element_blank</span><span class="p">()</span>
  <span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Notice how easy it was to highlight a single bar thanks to <a href="https://thomas-neitmann.github.io/ggcharts/index.html"><code>ggcharts</code></a>. In addition, I used my <a href="https://github.com/thomas-neitmann/mdthemes"><code>mdthemes</code></a> package which provides themes that interpret text as markdown. That way is was super easy to get the subtitle in <em>italics</em>. Furthermore, I removed the axis labels and grid lines. In my opinion you should <strong><em>never</em></strong> have an axis and labels in the same plot.</p>
<p>To finish off this post, let&rsquo;s have a quick look at how to label a vertical bar chart. It&rsquo;s basically the same process but instead of using <code>hjust</code> you will need to use <code>vjust</code> to adjust the label position.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="s">&#34;biomedicalrevenue&#34;</span><span class="p">)</span>

<span class="n">biomedicalrevenue</span> <span class="o">%&gt;%</span>
  <span class="nf">filter</span><span class="p">(</span><span class="n">company</span> <span class="o">==</span> <span class="s">&#34;Novartis&#34;</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">mutate</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="nf">sprintf</span><span class="p">(</span><span class="s">&#34;$%1.2f B.&#34;</span><span class="p">,</span> <span class="n">revenue</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">column_chart</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">revenue</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_text</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="n">label</span><span class="p">,</span> <span class="n">vjust</span> <span class="o">=</span> <span class="m">-1</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span>
    <span class="n">axis.text.y</span> <span class="o">=</span> <span class="nf">element_blank</span><span class="p">(),</span>
    <span class="n">panel.grid.major.y</span> <span class="o">=</span> <span class="nf">element_blank</span><span class="p">()</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">scale_x_continuous</span><span class="p">(</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Fiscal Year&#34;</span><span class="p">,</span>
    <span class="n">breaks</span> <span class="o">=</span> <span class="m">2011</span><span class="o">:</span><span class="m">2018</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">scale_y_continuous</span><span class="p">(</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Revenue (Billion USD)&#34;</span><span class="p">,</span>
    <span class="n">limits</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">70</span><span class="p">),</span>
    <span class="n">expand</span> <span class="o">=</span> <span class="nf">expansion</span><span class="p">()</span>
  <span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Always display the current date in an Rmarkdown report</title>
			<link>/posts/rmarkdown-current-date/</link>
			<pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/rmarkdown-current-date/</guid>
			<description>&lt;p&gt;&lt;code&gt;Rmarkdown&lt;/code&gt; is a great tool for creating data-driven reports that have to be updated on a regular basis. To communicate to stakeholders that the report is indeed up to date it&amp;rsquo;s important to display the current date below the title.&lt;/p&gt;
&lt;p&gt;An obvious solution to display the current date is to update the date field in the YAML header manually before knitting. But this is both error prone and you are likely to forget about it. Instead you can dislay the current date in an automatic way using the method below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Super Important Report&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Thomas Neitmann&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;`r Sys.Date()`&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When knitting the &lt;code&gt;Rmarkdown&lt;/code&gt; document &lt;code&gt;Sys.Date()&lt;/code&gt; will be evaluated and  display the current date.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Sys.Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;2020-03-22&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A caveat is the date format, though. &lt;code&gt;Sys.Date()&lt;/code&gt; returns the current date in ISO 8601 format, i.e. &lt;code&gt;yyyy-mm-dd&lt;/code&gt;. Your audience is likely not used to this format so you might want to use a date format that&amp;rsquo;s common in your locale.&lt;/p&gt;
&lt;p&gt;How to achieve that? Using the &lt;code&gt;format()&lt;/code&gt; function. Here are some examples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;current_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Sys.Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%d.%m.%Y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;22.03.2020&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%d. %B %Y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;22. März 2020&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%m/%d/%Y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;03/22/2020&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After deciding which format to use make sure to wrap &lt;code&gt;Sys.Date()&lt;/code&gt; inside of &lt;code&gt;format()&lt;/code&gt; in your YAML header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Super Important Report&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Thomas Neitmann&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;`r format(Sys.Date(), &amp;#34;%d. %B %Y&amp;#34;)`&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
			<content type="html"><![CDATA[<p><code>Rmarkdown</code> is a great tool for creating data-driven reports that have to be updated on a regular basis. To communicate to stakeholders that the report is indeed up to date it&rsquo;s important to display the current date below the title.</p>
<p>An obvious solution to display the current date is to update the date field in the YAML header manually before knitting. But this is both error prone and you are likely to forget about it. Instead you can dislay the current date in an automatic way using the method below.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="o">---</span>
<span class="n">title</span><span class="o">:</span> <span class="s">&#34;Super Important Report&#34;</span>
<span class="n">author</span><span class="o">:</span> <span class="s">&#34;Thomas Neitmann&#34;</span>
<span class="n">date</span><span class="o">:</span> <span class="n">`r Sys.Date()`</span>
<span class="o">---</span>
</code></pre></div><p>When knitting the <code>Rmarkdown</code> document <code>Sys.Date()</code> will be evaluated and  display the current date.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">Sys.Date</span><span class="p">()</span>
<span class="c1">## [1] &#34;2020-03-22&#34;</span>
</code></pre></div><p>A caveat is the date format, though. <code>Sys.Date()</code> returns the current date in ISO 8601 format, i.e. <code>yyyy-mm-dd</code>. Your audience is likely not used to this format so you might want to use a date format that&rsquo;s common in your locale.</p>
<p>How to achieve that? Using the <code>format()</code> function. Here are some examples.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">current_date</span> <span class="o">&lt;-</span> <span class="nf">Sys.Date</span><span class="p">()</span>
<span class="nf">format</span><span class="p">(</span><span class="n">current_date</span><span class="p">,</span> <span class="s">&#34;%d.%m.%Y&#34;</span><span class="p">)</span>
<span class="c1">## [1] &#34;22.03.2020&#34;</span>
<span class="nf">format</span><span class="p">(</span><span class="n">current_date</span><span class="p">,</span> <span class="s">&#34;%d. %B %Y&#34;</span><span class="p">)</span>
<span class="c1">## [1] &#34;22. März 2020&#34;</span>
<span class="nf">format</span><span class="p">(</span><span class="n">current_date</span><span class="p">,</span> <span class="s">&#34;%m/%d/%Y&#34;</span><span class="p">)</span>
<span class="c1">## [1] &#34;03/22/2020&#34;</span>
</code></pre></div><p>After deciding which format to use make sure to wrap <code>Sys.Date()</code> inside of <code>format()</code> in your YAML header.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="o">---</span>
<span class="n">title</span><span class="o">:</span> <span class="s">&#34;Super Important Report&#34;</span>
<span class="n">author</span><span class="o">:</span> <span class="s">&#34;Thomas Neitmann&#34;</span>
<span class="n">date</span><span class="o">:</span> <span class="n">`r format(Sys.Date(), &#34;%d. %B %Y&#34;)`</span>
<span class="o">---</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Getting R to print English error messages</title>
			<link>/posts/getting-r-to-print-english-error-messages/</link>
			<pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/getting-r-to-print-english-error-messages/</guid>
			<description>&lt;p&gt;If you live in a non-English locale such as I do, you&amp;rsquo;ll likely receive error messages in your locale language when things go wrong in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Error in 1 + &amp;quot;r&amp;quot;: nicht-numerisches Argument für binären Operator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a problem because it highly limits the results when searching for error messages on Google. Have you ever read a stackoverflow post that was not in English? I haven&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;So, how can you tell &lt;code&gt;R&lt;/code&gt; to &lt;em&gt;not&lt;/em&gt; translate error messages? By telling &lt;code&gt;R&lt;/code&gt; that you are in an English locale.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Sys.setenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;en_US&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your next error will be printed in English.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Error in 1 + &amp;quot;r&amp;quot;: non-numeric argument to binary operator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great!&lt;/p&gt;
&lt;p&gt;The only problem with this approach is that the next time you start a new &lt;code&gt;R&lt;/code&gt; session this change will be reverted. To make this change persistent add &lt;code&gt;Sys.setenv(lang = &amp;quot;en_US&amp;quot;)&lt;/code&gt; to your &lt;code&gt;.Rprofile&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Never heard of &lt;code&gt;.Rprofile&lt;/code&gt;? It&amp;rsquo;s basically an &lt;code&gt;R&lt;/code&gt; script that - if present - gets executed whenever you start &lt;code&gt;R&lt;/code&gt;. That makes it perfect for the purpose of changing your locale.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>If you live in a non-English locale such as I do, you&rsquo;ll likely receive error messages in your locale language when things go wrong in <code>R</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="m">1</span> <span class="o">+</span> <span class="s">&#34;r&#34;</span>
</code></pre></div><pre><code>## Error in 1 + &quot;r&quot;: nicht-numerisches Argument für binären Operator
</code></pre><p>This is a problem because it highly limits the results when searching for error messages on Google. Have you ever read a stackoverflow post that was not in English? I haven&rsquo;t.</p>
<p>So, how can you tell <code>R</code> to <em>not</em> translate error messages? By telling <code>R</code> that you are in an English locale.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">Sys.setenv</span><span class="p">(</span><span class="n">lang</span> <span class="o">=</span> <span class="s">&#34;en_US&#34;</span><span class="p">)</span>
</code></pre></div><p>Your next error will be printed in English.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="m">1</span> <span class="o">+</span> <span class="s">&#34;r&#34;</span>
</code></pre></div><pre><code>## Error in 1 + &quot;r&quot;: non-numeric argument to binary operator
</code></pre><p>Great!</p>
<p>The only problem with this approach is that the next time you start a new <code>R</code> session this change will be reverted. To make this change persistent add <code>Sys.setenv(lang = &quot;en_US&quot;)</code> to your <code>.Rprofile</code> file.</p>
<p>Never heard of <code>.Rprofile</code>? It&rsquo;s basically an <code>R</code> script that - if present - gets executed whenever you start <code>R</code>. That makes it perfect for the purpose of changing your locale.</p>
]]></content>
		</item>
		
		<item>
			<title>A case for the assign() function</title>
			<link>/posts/a-case-for-the-assign-function/</link>
			<pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/a-case-for-the-assign-function/</guid>
			<description>&lt;p&gt;In &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;assign()&lt;/code&gt; is one of those functions that common wisdom says you shouldn&amp;rsquo;t be using. My aim in this blog post is to convince you that &lt;code&gt;assign()&lt;/code&gt; can be very handy.&lt;/p&gt;
&lt;p&gt;The pharmaceutical industry, which I work in, is still &lt;code&gt;SAS&lt;/code&gt; dominated so my primary data source at work are &lt;code&gt;.sas7bdat&lt;/code&gt; files. Thus, whenever I use &lt;code&gt;R&lt;/code&gt; the first thing I have to do is read in those files.&lt;/p&gt;
&lt;p&gt;Since the files have standard names, e.g. &lt;code&gt;ADAE&lt;/code&gt; (Analysis Datasets Adverse Events), I want to read them into the global environment with exactly these names.&lt;/p&gt;
&lt;p&gt;For a single file that&amp;rsquo;s easy. Just give the variable the same name as the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;adae&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;haven&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_sas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data/adae.sas7bdat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have a directory with multiple files in it this becomes tedious, though. Let&amp;rsquo;s simulate this by creating a couple of &lt;code&gt;.csv&lt;/code&gt; files with random numbers in it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tempdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;adsl.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;adae.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;adrs.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;adtte.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;for &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataset&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;rnorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;write.csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;file.path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the data ready the first step is to get a list of all files. Note that I purposefully set &lt;code&gt;full.names = FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;list.files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;csv$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full.names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;adae.csv&amp;quot;  &amp;quot;adrs.csv&amp;quot;  &amp;quot;adsl.csv&amp;quot;  &amp;quot;adtte.csv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, to read in all those files I loop over each file and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remove the extension from &lt;code&gt;file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;construct the full path to the file with &lt;code&gt;file.path()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;read in the &lt;code&gt;.csv&lt;/code&gt; file and &lt;code&gt;assign&lt;/code&gt; it to its name.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;for &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;file_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file_path_sans_ext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;full_path_to_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;file.path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;full_path_to_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;envir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;.GlobalEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that &lt;code&gt;envir = .GlobalEnv&lt;/code&gt; is redundant here but I like to be explicit. 
Let&amp;rsquo;s make sure that this actually worked as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;adae&amp;quot;              &amp;quot;adrs&amp;quot;              &amp;quot;adsl&amp;quot;             
##  [4] &amp;quot;adtte&amp;quot;             &amp;quot;data&amp;quot;              &amp;quot;dataset&amp;quot;          
##  [7] &amp;quot;datasets&amp;quot;          &amp;quot;dir&amp;quot;               &amp;quot;file&amp;quot;             
## [10] &amp;quot;file_name&amp;quot;         &amp;quot;files&amp;quot;             &amp;quot;full_path_to_file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Indeed, now there are five new variables in the global environment that have the names of the files created earlier.&lt;/p&gt;
&lt;p&gt;Without using &lt;code&gt;assign()&lt;/code&gt; you&amp;rsquo;d end up putting all datasets in a &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;read.csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file.path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That may not be so bad but actually this list doesn&amp;rsquo;t have names which is a problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I hope this convinced you that &lt;code&gt;assign()&lt;/code&gt; is a useful function.&lt;/p&gt;
&lt;p&gt;Did you ever use &lt;code&gt;assign()&lt;/code&gt;? I&amp;rsquo;d love to know in the comments.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>In <code>R</code>, <code>assign()</code> is one of those functions that common wisdom says you shouldn&rsquo;t be using. My aim in this blog post is to convince you that <code>assign()</code> can be very handy.</p>
<p>The pharmaceutical industry, which I work in, is still <code>SAS</code> dominated so my primary data source at work are <code>.sas7bdat</code> files. Thus, whenever I use <code>R</code> the first thing I have to do is read in those files.</p>
<p>Since the files have standard names, e.g. <code>ADAE</code> (Analysis Datasets Adverse Events), I want to read them into the global environment with exactly these names.</p>
<p>For a single file that&rsquo;s easy. Just give the variable the same name as the file.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">adae</span> <span class="o">&lt;-</span> <span class="n">haven</span><span class="o">::</span><span class="nf">read_sas</span><span class="p">(</span><span class="s">&#34;data/adae.sas7bdat&#34;</span><span class="p">)</span>
</code></pre></div><p>If you have a directory with multiple files in it this becomes tedious, though. Let&rsquo;s simulate this by creating a couple of <code>.csv</code> files with random numbers in it.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">dir</span> <span class="o">&lt;-</span> <span class="nf">tempdir</span><span class="p">()</span>
<span class="n">datasets</span> <span class="o">&lt;-</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;adsl.csv&#34;</span><span class="p">,</span> <span class="s">&#34;adae.csv&#34;</span><span class="p">,</span> <span class="s">&#34;adrs.csv&#34;</span><span class="p">,</span> <span class="s">&#34;adtte.csv&#34;</span><span class="p">)</span>
<span class="nf">for </span><span class="p">(</span><span class="n">dataset</span> <span class="n">in</span> <span class="n">datasets</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">data</span> <span class="o">&lt;-</span> <span class="nf">matrix</span><span class="p">(</span><span class="nf">rnorm</span><span class="p">(</span><span class="m">100</span><span class="p">),</span> <span class="n">nrow</span> <span class="o">=</span> <span class="m">10</span><span class="p">)</span>
  <span class="nf">write.csv</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="nf">file.path</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">dataset</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div><p>With the data ready the first step is to get a list of all files. Note that I purposefully set <code>full.names = FALSE</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">files</span> <span class="o">&lt;-</span> <span class="nf">list.files</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">&#34;csv$&#34;</span><span class="p">,</span> <span class="n">full.names</span> <span class="o">=</span> <span class="kc">FALSE</span><span class="p">))</span>
</code></pre></div><pre><code>## [1] &quot;adae.csv&quot;  &quot;adrs.csv&quot;  &quot;adsl.csv&quot;  &quot;adtte.csv&quot;
</code></pre><p>Next, to read in all those files I loop over each file and</p>
<ul>
<li>remove the extension from <code>file</code></li>
<li>construct the full path to the file with <code>file.path()</code></li>
<li>read in the <code>.csv</code> file and <code>assign</code> it to its name.</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">for </span><span class="p">(</span><span class="n">file</span> <span class="n">in</span> <span class="n">files</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">file_name</span> <span class="o">&lt;-</span> <span class="n">tools</span><span class="o">::</span><span class="nf">file_path_sans_ext</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
  <span class="n">full_path_to_file</span> <span class="o">&lt;-</span> <span class="nf">file.path</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
  <span class="nf">assign</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="nf">read.csv</span><span class="p">(</span><span class="n">full_path_to_file</span><span class="p">),</span> <span class="n">envir</span> <span class="o">=</span> <span class="n">.GlobalEnv</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Note that <code>envir = .GlobalEnv</code> is redundant here but I like to be explicit. 
Let&rsquo;s make sure that this actually worked as expected.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">ls</span><span class="p">()</span>
</code></pre></div><pre><code>##  [1] &quot;adae&quot;              &quot;adrs&quot;              &quot;adsl&quot;             
##  [4] &quot;adtte&quot;             &quot;data&quot;              &quot;dataset&quot;          
##  [7] &quot;datasets&quot;          &quot;dir&quot;               &quot;file&quot;             
## [10] &quot;file_name&quot;         &quot;files&quot;             &quot;full_path_to_file&quot;
</code></pre><p>Indeed, now there are five new variables in the global environment that have the names of the files created earlier.</p>
<p>Without using <code>assign()</code> you&rsquo;d end up putting all datasets in a <code>list</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">data</span> <span class="o">&lt;-</span> <span class="nf">lapply</span><span class="p">(</span><span class="n">files</span><span class="p">,</span> <span class="nf">function</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">read.csv</span><span class="p">(</span><span class="nf">file.path</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">file</span><span class="p">))</span>
<span class="p">})</span>
</code></pre></div><p>That may not be so bad but actually this list doesn&rsquo;t have names which is a problem.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">names</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div><pre><code>## NULL
</code></pre><p>I hope this convinced you that <code>assign()</code> is a useful function.</p>
<p>Did you ever use <code>assign()</code>? I&rsquo;d love to know in the comments.</p>
]]></content>
		</item>
		
		<item>
			<title>Streamline your dplyr chains with count()</title>
			<link>/posts/dplyr-count/</link>
			<pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/dplyr-count/</guid>
			<description>&lt;p&gt;If you frequently use chains like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;group_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;summarise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;consider using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;instead. It produces the same output, you need to type less and the code is more expressive.&lt;/p&gt;
&lt;p&gt;By default, the column containing the count will be named &lt;code&gt;n&lt;/code&gt;. Want to change that? Simply set the &lt;code&gt;name&lt;/code&gt; parameter of &lt;code&gt;count()&lt;/code&gt;, e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dplyr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Species&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;n_flowers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   Species    n_flowers
##   &amp;lt;fct&amp;gt;          &amp;lt;int&amp;gt;
## 1 setosa            50
## 2 versicolor        50
## 3 virginica         50
&lt;/code&gt;&lt;/pre&gt;</description>
			<content type="html"><![CDATA[<p>If you frequently use chains like this</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">data</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">summarise</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="nf">n</span><span class="p">())</span>
</code></pre></div><p>consider using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">count</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">var1</span><span class="p">,</span> <span class="n">var2</span><span class="p">)</span>
</code></pre></div><p>instead. It produces the same output, you need to type less and the code is more expressive.</p>
<p>By default, the column containing the count will be named <code>n</code>. Want to change that? Simply set the <code>name</code> parameter of <code>count()</code>, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span>
<span class="n">dplyr</span><span class="o">::</span><span class="nf">count</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="n">Species</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;n_flowers&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>## # A tibble: 3 x 2
##   Species    n_flowers
##   &lt;fct&gt;          &lt;int&gt;
## 1 setosa            50
## 2 versicolor        50
## 3 virginica         50
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Creating dumbbell charts with the ggcharts R package</title>
			<link>/posts/dumbbel-charts-with-ggcharts/</link>
			<pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/dumbbel-charts-with-ggcharts/</guid>
			<description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggcharts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dplyr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gapminder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gapminder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am very pleased to announce that my &lt;a href=&#34;https://github.com/thomas-neitmann/ggcharts&#34;&gt;&lt;code&gt;ggcharts&lt;/code&gt;&lt;/a&gt; package has a new feature: &lt;code&gt;dumbbell_chart()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To showcase this new function I will use the &lt;code&gt;gapminder&lt;/code&gt; dataset which contains countries&amp;rsquo; population counts from 1952 to 2017. This dataset is in long format. In order for &lt;code&gt;dumbbell_chart()&lt;/code&gt; to work properly the data has to be in &lt;em&gt;wide&lt;/em&gt; format, though. So, first a bit of data wrangling.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;gapminder_wide&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gapminder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;mutate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%in%&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1952&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2007&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;tidyr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pivot_wider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;id_cols&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;names_from&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;values_from&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;names_prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pop_&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gapminder_wide&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 142 x 3
##    country     pop_1952 pop_2007
##    &amp;lt;fct&amp;gt;          &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Afghanistan    8.43    31.9  
##  2 Albania        1.28     3.60 
##  3 Algeria        9.28    33.3  
##  4 Angola         4.23    12.4  
##  5 Argentina     17.9     40.3  
##  6 Australia      8.69    20.4  
##  7 Austria        6.93     8.20 
##  8 Bahrain        0.120    0.709
##  9 Bangladesh    46.9    150.   
## 10 Belgium        8.73    10.4  
## # ... with 132 more rows
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the data being ready, let&amp;rsquo;s create a simple chart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;dumbbell_chart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gapminder_wide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pop_1952&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pop_2007&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;That looks already quite nice but let&amp;rsquo;s customize the plot to make it look even better. First, let&amp;rsquo;s see which customizations can be done by changing the defaults of &lt;code&gt;dumbbell_chart()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dumbbell_chart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gapminder_wide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pop_1952&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pop_2007&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;point_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;point_colors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lightgray&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;legend_labels&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1952&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;2007&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;To further customize the plot you can use &lt;code&gt;ggplot2&lt;/code&gt; functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;scale_y_continuous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;expand_scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mult&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;.025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;plot.caption&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;element_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mono&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;labs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The World is Growing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;subtitle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Top 10 Most Populated Countries in 2007&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;caption&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chart created using #ggcharts&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;xlab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;ylab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Population (Millions)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggcharts</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">gapminder</span><span class="p">)</span>
</code></pre></div><p>I am very pleased to announce that my <a href="https://github.com/thomas-neitmann/ggcharts"><code>ggcharts</code></a> package has a new feature: <code>dumbbell_chart()</code>.</p>
<p>To showcase this new function I will use the <code>gapminder</code> dataset which contains countries&rsquo; population counts from 1952 to 2017. This dataset is in long format. In order for <code>dumbbell_chart()</code> to work properly the data has to be in <em>wide</em> format, though. So, first a bit of data wrangling.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">gapminder_wide</span> <span class="o">&lt;-</span> <span class="n">gapminder</span> <span class="o">%&gt;%</span>
  <span class="nf">mutate</span><span class="p">(</span><span class="n">pop</span> <span class="o">=</span> <span class="n">pop</span> <span class="o">/</span> <span class="m">1e6</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">filter</span><span class="p">(</span><span class="n">year</span> <span class="o">%in%</span> <span class="nf">c</span><span class="p">(</span><span class="m">1952</span><span class="p">,</span> <span class="m">2007</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="n">tidyr</span><span class="o">::</span><span class="nf">pivot_wider</span><span class="p">(</span>
    <span class="n">id_cols</span> <span class="o">=</span> <span class="n">country</span><span class="p">,</span>
    <span class="n">names_from</span> <span class="o">=</span> <span class="n">year</span><span class="p">,</span>
    <span class="n">values_from</span> <span class="o">=</span> <span class="n">pop</span><span class="p">,</span>
    <span class="n">names_prefix</span> <span class="o">=</span> <span class="s">&#34;pop_&#34;</span>
  <span class="p">)</span>
<span class="n">gapminder_wide</span>
</code></pre></div><pre><code>## # A tibble: 142 x 3
##    country     pop_1952 pop_2007
##    &lt;fct&gt;          &lt;dbl&gt;    &lt;dbl&gt;
##  1 Afghanistan    8.43    31.9  
##  2 Albania        1.28     3.60 
##  3 Algeria        9.28    33.3  
##  4 Angola         4.23    12.4  
##  5 Argentina     17.9     40.3  
##  6 Australia      8.69    20.4  
##  7 Austria        6.93     8.20 
##  8 Bahrain        0.120    0.709
##  9 Bangladesh    46.9    150.   
## 10 Belgium        8.73    10.4  
## # ... with 132 more rows
</code></pre><p>With the data being ready, let&rsquo;s create a simple chart.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">dumbbell_chart</span><span class="p">(</span><span class="n">gapminder_wide</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">pop_1952</span><span class="p">,</span> <span class="n">pop_2007</span><span class="p">,</span>
               <span class="n">limit</span> <span class="o">=</span> <span class="m">10</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>That looks already quite nice but let&rsquo;s customize the plot to make it look even better. First, let&rsquo;s see which customizations can be done by changing the defaults of <code>dumbbell_chart()</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">&lt;-</span> <span class="nf">dumbbell_chart</span><span class="p">(</span><span class="n">gapminder_wide</span><span class="p">,</span> <span class="n">country</span><span class="p">,</span> <span class="n">pop_1952</span><span class="p">,</span> <span class="n">pop_2007</span><span class="p">,</span>
                        <span class="n">limit</span> <span class="o">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">point_size</span> <span class="o">=</span> <span class="m">5</span><span class="p">,</span>
                        <span class="n">point_colors</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;lightgray&#34;</span><span class="p">,</span> <span class="s">&#34;black&#34;</span><span class="p">),</span>
                        <span class="n">legend_labels</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;1952&#34;</span><span class="p">,</span> <span class="s">&#34;2007&#34;</span><span class="p">))</span>
<span class="n">chart</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>To further customize the plot you can use <code>ggplot2</code> functions.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">chart</span> <span class="o">+</span>
  <span class="nf">scale_y_continuous</span><span class="p">(</span><span class="n">expand</span> <span class="o">=</span> <span class="nf">expand_scale</span><span class="p">(</span><span class="n">mult</span> <span class="o">=</span> <span class="m">.025</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nf">element_text</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="m">14</span><span class="p">),</span>
    <span class="n">plot.caption</span> <span class="o">=</span> <span class="nf">element_text</span><span class="p">(</span><span class="n">family</span> <span class="o">=</span> <span class="s">&#34;mono&#34;</span><span class="p">)</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">labs</span><span class="p">(</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;The World is Growing&#34;</span><span class="p">,</span>
    <span class="n">subtitle</span> <span class="o">=</span> <span class="s">&#34;Top 10 Most Populated Countries in 2007&#34;</span><span class="p">,</span>
    <span class="n">caption</span> <span class="o">=</span> <span class="s">&#34;Chart created using #ggcharts&#34;</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">xlab</span><span class="p">(</span><span class="kc">NULL</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">ylab</span><span class="p">(</span><span class="s">&#34;Population (Millions)&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Changing things up with ggplot2 themes</title>
			<link>/posts/changing-things-up-with-ggplot2-themes/</link>
			<pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/changing-things-up-with-ggplot2-themes/</guid>
			<description>&lt;p&gt;Are you tired of adding your favorite &lt;code&gt;ggplot2&lt;/code&gt; theme to every data visualization you create in &lt;code&gt;R&lt;/code&gt;? Then I have a solution for you!&lt;/p&gt;
&lt;p&gt;Before you start to create any plots call the &lt;code&gt;theme_set()&lt;/code&gt; function with your favorite theme as first argument, e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggplot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;theme_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That will ensure all plots you subsequently create will use this theme unless you add a different one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mtcars&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Very handy for lazy people like me.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>Are you tired of adding your favorite <code>ggplot2</code> theme to every data visualization you create in <code>R</code>? Then I have a solution for you!</p>
<p>Before you start to create any plots call the <code>theme_set()</code> function with your favorite theme as first argument, e.g.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">theme_set</span><span class="p">(</span><span class="nf">theme_minimal</span><span class="p">())</span>
</code></pre></div><p>That will ensure all plots you subsequently create will use this theme unless you add a different one.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">data</span><span class="p">(</span><span class="s">&#34;mtcars&#34;</span><span class="p">)</span>
<span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Very handy for lazy people like me.</p>
]]></content>
		</item>
		
		<item>
			<title>Turning your ggplot2 code into a function</title>
			<link>/posts/turning-your-ggplot2-code-into-a-function/</link>
			<pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/turning-your-ggplot2-code-into-a-function/</guid>
			<description>&lt;p&gt;If you find yourself repeatedly writing the same &lt;code&gt;ggplot2&lt;/code&gt; code to create a data visualization in &lt;code&gt;R&lt;/code&gt;, then it&amp;rsquo;s time to put your code into a function.&lt;/p&gt;
&lt;p&gt;You may start out with an implementation similar to this one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggplot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;theme_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggcharts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;theme_hermit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;XY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mtcars&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;scatter_plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;geom_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That won&amp;rsquo;t work though.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;scatter_plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Error in FUN(X[[i]], ...): object &#39;hp&#39; not found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you call this function, &lt;code&gt;R&lt;/code&gt; will look for a variable called &lt;code&gt;hp&lt;/code&gt; rather than looking for a column with that name inside the data frame you passed as the first argument.&lt;/p&gt;
&lt;p&gt;So, maybe it works when putting the column names in quotes?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;scatter_plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Well, no error this time but that most likely did not produce what you expected.&lt;/p&gt;
&lt;p&gt;The key to making this work is to tell &lt;code&gt;R&lt;/code&gt;  somehow that it should look for the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; arguments inside data. How can you achieve this? Using &lt;code&gt;{{ }}&lt;/code&gt; (speak curly-curly) from the &lt;code&gt;rlang&lt;/code&gt; package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;scatter_plot2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;geom_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;scatter_plot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;There you have it: that&amp;rsquo;s how you can create your own custom plotting function on top of &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Want to see the power of custom plotting functions in action? Make sure to check out my &lt;a href=&#34;https://github.com/thomas-neitmann/ggcharts&#34;&gt;&lt;code&gt;ggcharts&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>If you find yourself repeatedly writing the same <code>ggplot2</code> code to create a data visualization in <code>R</code>, then it&rsquo;s time to put your code into a function.</p>
<p>You may start out with an implementation similar to this one.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">theme_set</span><span class="p">(</span><span class="n">ggcharts</span><span class="o">::</span><span class="nf">theme_hermit</span><span class="p">(</span><span class="n">grid</span> <span class="o">=</span> <span class="s">&#34;XY&#34;</span><span class="p">))</span>
<span class="nf">data</span><span class="p">(</span><span class="s">&#34;mtcars&#34;</span><span class="p">)</span>

<span class="n">scatter_plot</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="o">+</span>
    <span class="nf">geom_point</span><span class="p">(</span><span class="n">color</span> <span class="o">=</span> <span class="s">&#34;yellow&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>That won&rsquo;t work though.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">scatter_plot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div><pre><code>## Error in FUN(X[[i]], ...): object 'hp' not found
</code></pre><p>If you call this function, <code>R</code> will look for a variable called <code>hp</code> rather than looking for a column with that name inside the data frame you passed as the first argument.</p>
<p>So, maybe it works when putting the column names in quotes?</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">scatter_plot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="s">&#34;hp&#34;</span><span class="p">,</span> <span class="s">&#34;mpg&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Well, no error this time but that most likely did not produce what you expected.</p>
<p>The key to making this work is to tell <code>R</code>  somehow that it should look for the <code>x</code> and <code>y</code> arguments inside data. How can you achieve this? Using <code>{{ }}</code> (speak curly-curly) from the <code>rlang</code> package.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">scatter_plot2</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nf">aes</span><span class="p">({{</span><span class="n">x</span><span class="p">}},</span> <span class="p">{{</span><span class="n">y</span><span class="p">}}))</span> <span class="o">+</span>
    <span class="nf">geom_point</span><span class="p">(</span><span class="n">color</span> <span class="o">=</span> <span class="s">&#34;yellow&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">scatter_plot2</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="n">hp</span><span class="p">,</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>There you have it: that&rsquo;s how you can create your own custom plotting function on top of <code>ggplot2</code>.</p>
<p>Want to see the power of custom plotting functions in action? Make sure to check out my <a href="https://github.com/thomas-neitmann/ggcharts"><code>ggcharts</code></a> package.</p>
]]></content>
		</item>
		
		<item>
			<title>Renaming files in a git repository</title>
			<link>/posts/renaming-files-in-a-git-repository/</link>
			<pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/renaming-files-in-a-git-repository/</guid>
			<description>&lt;p&gt;If you are using &lt;code&gt;git&lt;/code&gt; for your data science project (which you should!), you have to be careful when renaming a file.&lt;/p&gt;
&lt;p&gt;If you simply rename the file in your OS file browser, &lt;code&gt;git&lt;/code&gt; would interpret this as deleting the file with the old name and creating a new one with the new name. They wouldn&amp;rsquo;t be linked in any way and you&amp;rsquo;d essentially loose the history of that file.&lt;/p&gt;
&lt;p&gt;So, how can you rename a file and keep its history? You need to use the &lt;code&gt;git mv&lt;/code&gt; command and subsequently make a commit. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git mv old_name.ext new_name.ext
git commit -m &lt;span class=&#34;s1&#34;&gt;&amp;#39;Rename old_name.ext to new_name.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! Don&amp;rsquo;t be afraid to rename a file when using &lt;code&gt;git&lt;/code&gt;. Just use the right command.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>If you are using <code>git</code> for your data science project (which you should!), you have to be careful when renaming a file.</p>
<p>If you simply rename the file in your OS file browser, <code>git</code> would interpret this as deleting the file with the old name and creating a new one with the new name. They wouldn&rsquo;t be linked in any way and you&rsquo;d essentially loose the history of that file.</p>
<p>So, how can you rename a file and keep its history? You need to use the <code>git mv</code> command and subsequently make a commit. Here&rsquo;s an example:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git mv old_name.ext new_name.ext
git commit -m <span class="s1">&#39;Rename old_name.ext to new_name.txt&#39;</span>
</code></pre></div><p>That&rsquo;s it! Don&rsquo;t be afraid to rename a file when using <code>git</code>. Just use the right command.</p>
]]></content>
		</item>
		
		<item>
			<title>Enhance your ggplot2 data visualizations with ggtext</title>
			<link>/posts/enhacing-ggplot2-with-ggtext/</link>
			<pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/enhacing-ggplot2-with-ggtext/</guid>
			<description>&lt;p&gt;I am super exciting to share with you my recent &amp;ldquo;discovery&amp;rdquo; of the &lt;code&gt;ggtext&lt;/code&gt; &lt;code&gt;R&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;I had looked for a solution to color individual words in the title of a &lt;code&gt;ggplot2&lt;/code&gt; data visualization and &lt;code&gt;ggtext&lt;/code&gt; provided me with a great solution for doing just that (and more).&lt;/p&gt;
&lt;p&gt;So, how does it work? Have a look at this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggplot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dplyr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;biomedicalrevenue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ggcharts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;biomedicalrevenue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;company&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%in%&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Roche&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Novartis&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;revenue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;company&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;ggtitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;span style = &amp;#39;color:#93C1DE&amp;#39;&amp;gt;**Roche**&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34; *overtook* &amp;lt;span style = &amp;#39;color:darkorange&amp;#39;&amp;gt;**Novartis**&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34; in 2016&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;scale_color_manual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Roche&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#93C1DE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Novartis&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;darkorange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;guide&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ggcharts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;theme_hermit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ticks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot.title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ggtext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;element_markdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;theme()&lt;/code&gt; I set &lt;code&gt;plot.title = ggtext::element_markdown()&lt;/code&gt;. This has the effect that the plot title I created using &lt;code&gt;ggtitle()&lt;/code&gt; is interpreted as markdown/HTML. That made it possible to have the title of the plot act as a legend by coloring the appropriate keywords.&lt;/p&gt;
&lt;p&gt;Notice also that inside of &lt;code&gt;scale_color_manual()&lt;/code&gt; I set &lt;code&gt;guide = &amp;quot;none&amp;quot;&lt;/code&gt;. This results in no legend being drawn which would be redundant in this plot.&lt;/p&gt;
&lt;p&gt;Quite a neat solution, isn&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;While you need to revert to HTML for coloring the text you can use markdown for making individual words bold (e.g. &lt;code&gt;**Roche**&lt;/code&gt;), italics (e.g. &lt;code&gt;*overtook*&lt;/code&gt;) and so forth. I love the flexibility this offers.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ggtext&lt;/code&gt; package is not yet available on CRAN but you can install it from GitHub using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;remotes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;install_github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wilkelab/ggtext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting individual theme elements to &lt;code&gt;ggtext::element_markdown()&lt;/code&gt; can add quite a bit of boilerplate code to your plot. That&amp;rsquo;s why I decided to create the &lt;a href=&#34;https://github.com/thomas-neitmann/mdthemes&#34;&gt;&lt;code&gt;mdthemes&lt;/code&gt;&lt;/a&gt; package which provides themes that interpret text as markdown out of the box. Let&amp;rsquo;s contrast a &amp;ldquo;normal&amp;rdquo; theme with an &lt;code&gt;md_theme&lt;/code&gt;. First, have a look at what happens if I add &lt;code&gt;theme_minimal()&lt;/code&gt; to the plot I just created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;As expected, the title is not rendered correctly because the &lt;code&gt;plot.title&lt;/code&gt; theme element is overwritten. If you use &lt;code&gt;md_theme_minimal()&lt;/code&gt;, however, it just works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mdthemes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;md_theme_minimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Apart from the title, the subtitle, axis labels and captions are set to &lt;code&gt;element_markdown()&lt;/code&gt; for all &lt;code&gt;mdthemes&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;labs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;**Year**&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Revenue (*Billion* USD)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;caption&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Data Source: *en.wikipedia.org/wiki/List_of_largest_biomedical_companies_by_revenue*&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;mdthemes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;md_theme_minimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mdthemes&lt;/code&gt; packages currently contains all themes from &lt;code&gt;ggplot2&lt;/code&gt;, &lt;code&gt;ggthemes&lt;/code&gt;, &lt;code&gt;hrbrthemes&lt;/code&gt; and &lt;code&gt;tvthemes&lt;/code&gt; with support for rendering text as markdown.&lt;/p&gt;
&lt;p&gt;If you want to turn a theme that is not part of the &lt;code&gt;mdthemes&lt;/code&gt; package into an &lt;code&gt;md_theme&lt;/code&gt; you can use the &lt;code&gt;as_md_theme()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mdthemes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;as_md_theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Just like &lt;code&gt;ggtext&lt;/code&gt;, the &lt;code&gt;mdthemes&lt;/code&gt; package is currently only available from GitHub. You can install it by copy-pasting this code into your &lt;code&gt;R&lt;/code&gt; console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;remotes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;install_github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thomas-neitmann/mdthemes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
			<content type="html"><![CDATA[<p>I am super exciting to share with you my recent &ldquo;discovery&rdquo; of the <code>ggtext</code> <code>R</code> package.</p>
<p>I had looked for a solution to color individual words in the title of a <code>ggplot2</code> data visualization and <code>ggtext</code> provided me with a great solution for doing just that (and more).</p>
<p>So, how does it work? Have a look at this example:</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">biomedicalrevenue</span><span class="p">,</span> <span class="n">package</span> <span class="o">=</span> <span class="s">&#34;ggcharts&#34;</span><span class="p">)</span>

<span class="n">plot</span> <span class="o">&lt;-</span> <span class="n">biomedicalrevenue</span> <span class="o">%&gt;%</span>
  <span class="nf">filter</span><span class="p">(</span><span class="n">company</span> <span class="o">%in%</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;Roche&#34;</span><span class="p">,</span> <span class="s">&#34;Novartis&#34;</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">ggplot</span><span class="p">(</span><span class="nf">aes</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">revenue</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">company</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_line</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="m">1.2</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">ggtitle</span><span class="p">(</span>
    <span class="nf">paste0</span><span class="p">(</span>
      <span class="s">&#34;&lt;span style = &#39;color:#93C1DE&#39;&gt;**Roche**&lt;/span&gt;&#34;</span><span class="p">,</span>
      <span class="s">&#34; *overtook* &lt;span style = &#39;color:darkorange&#39;&gt;**Novartis**&lt;/span&gt;&#34;</span><span class="p">,</span>
      <span class="s">&#34; in 2016&#34;</span>
    <span class="p">)</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="nf">scale_color_manual</span><span class="p">(</span>
    <span class="n">values</span> <span class="o">=</span> <span class="nf">c</span><span class="p">(</span><span class="s">&#34;Roche&#34;</span> <span class="o">=</span> <span class="s">&#34;#93C1DE&#34;</span><span class="p">,</span> <span class="s">&#34;Novartis&#34;</span> <span class="o">=</span> <span class="s">&#34;darkorange&#34;</span><span class="p">),</span>
    <span class="n">guide</span> <span class="o">=</span> <span class="s">&#34;none&#34;</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="n">ggcharts</span><span class="o">::</span><span class="nf">theme_hermit</span><span class="p">(</span><span class="n">ticks</span> <span class="o">=</span> <span class="s">&#34;x&#34;</span><span class="p">,</span> <span class="n">grid</span> <span class="o">=</span> <span class="s">&#34;X&#34;</span><span class="p">)</span>  <span class="o">+</span>
  <span class="nf">theme</span><span class="p">(</span><span class="n">plot.title</span> <span class="o">=</span> <span class="n">ggtext</span><span class="o">::</span><span class="nf">element_markdown</span><span class="p">())</span>
<span class="n">plot</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Inside <code>theme()</code> I set <code>plot.title = ggtext::element_markdown()</code>. This has the effect that the plot title I created using <code>ggtitle()</code> is interpreted as markdown/HTML. That made it possible to have the title of the plot act as a legend by coloring the appropriate keywords.</p>
<p>Notice also that inside of <code>scale_color_manual()</code> I set <code>guide = &quot;none&quot;</code>. This results in no legend being drawn which would be redundant in this plot.</p>
<p>Quite a neat solution, isn&rsquo;t it?</p>
<p>While you need to revert to HTML for coloring the text you can use markdown for making individual words bold (e.g. <code>**Roche**</code>), italics (e.g. <code>*overtook*</code>) and so forth. I love the flexibility this offers.</p>
<p>The <code>ggtext</code> package is not yet available on CRAN but you can install it from GitHub using</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">remotes</span><span class="o">::</span><span class="nf">install_github</span><span class="p">(</span><span class="s">&#34;wilkelab/ggtext&#34;</span><span class="p">)</span>
</code></pre></div><p>Setting individual theme elements to <code>ggtext::element_markdown()</code> can add quite a bit of boilerplate code to your plot. That&rsquo;s why I decided to create the <a href="https://github.com/thomas-neitmann/mdthemes"><code>mdthemes</code></a> package which provides themes that interpret text as markdown out of the box. Let&rsquo;s contrast a &ldquo;normal&rdquo; theme with an <code>md_theme</code>. First, have a look at what happens if I add <code>theme_minimal()</code> to the plot I just created.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">plot</span> <span class="o">+</span> <span class="nf">theme_minimal</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>As expected, the title is not rendered correctly because the <code>plot.title</code> theme element is overwritten. If you use <code>md_theme_minimal()</code>, however, it just works.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">plot</span> <span class="o">+</span> <span class="n">mdthemes</span><span class="o">::</span><span class="nf">md_theme_minimal</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Apart from the title, the subtitle, axis labels and captions are set to <code>element_markdown()</code> for all <code>mdthemes</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">plot</span> <span class="o">+</span>
  <span class="nf">labs</span><span class="p">(</span>
    <span class="n">x</span> <span class="o">=</span> <span class="s">&#34;**Year**&#34;</span><span class="p">,</span>
    <span class="n">y</span> <span class="o">=</span> <span class="s">&#34;Revenue (*Billion* USD)&#34;</span><span class="p">,</span>
    <span class="n">caption</span> <span class="o">=</span> <span class="s">&#34;Data Source: *en.wikipedia.org/wiki/List_of_largest_biomedical_companies_by_revenue*&#34;</span>
  <span class="p">)</span> <span class="o">+</span>
  <span class="n">mdthemes</span><span class="o">::</span><span class="nf">md_theme_minimal</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>The <code>mdthemes</code> packages currently contains all themes from <code>ggplot2</code>, <code>ggthemes</code>, <code>hrbrthemes</code> and <code>tvthemes</code> with support for rendering text as markdown.</p>
<p>If you want to turn a theme that is not part of the <code>mdthemes</code> package into an <code>md_theme</code> you can use the <code>as_md_theme()</code> function.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">plot</span> <span class="o">+</span> <span class="n">mdthemes</span><span class="o">::</span><span class="nf">as_md_theme</span><span class="p">(</span><span class="nf">theme_minimal</span><span class="p">())</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<p>Just like <code>ggtext</code>, the <code>mdthemes</code> package is currently only available from GitHub. You can install it by copy-pasting this code into your <code>R</code> console.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">remotes</span><span class="o">::</span><span class="nf">install_github</span><span class="p">(</span><span class="s">&#34;thomas-neitmann/mdthemes&#34;</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Creating excel files from R using openxlsx</title>
			<link>/posts/creating-excel-files-from-r-using-openxlsx/</link>
			<pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/creating-excel-files-from-r-using-openxlsx/</guid>
			<description>&lt;p&gt;Yesterday I had to share data with some internal stakeholders in excel format. Why excel? Well, I guess if you are not a &amp;ldquo;data professional&amp;rdquo;, then that&amp;rsquo;s the easiest format to work with.&lt;/p&gt;
&lt;p&gt;So, I started &lt;code&gt;R&lt;/code&gt;, read in the dataset, did some data wrangling and then wanted to write the data to a xlsx file. I heard great things about the &lt;code&gt;openxlsx&lt;/code&gt; package so I used it for the first time. My initial attempt was using the &lt;code&gt;write.xlsx()&lt;/code&gt; function. That certainly did the job but the resulting file didn&amp;rsquo;t look how I like my excel files. I am a fan of a freezed top row with bold and centered column headers.&lt;/p&gt;
&lt;p&gt;I digged a bit into the &lt;code&gt;openxlsx&lt;/code&gt; documentation and it turned out that the package can do all of this. Great!&lt;/p&gt;
&lt;p&gt;Here is the code I used (obviously not exporting the mtcars dataset):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;openxlsx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;header_style&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createStyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;halign&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;textDecoration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;wb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createWorkbook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;addWorksheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;writeData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headerStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header_style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;freezePane&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;firstRow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;setColWidths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cols&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ncol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;widths&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;saveWorkbook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mtcars.xlsx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overwrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only thing that didn&amp;rsquo;t quite work was adjusting the column width to fit the content. While there is a &lt;code&gt;setColWidths()&lt;/code&gt; function where you can set the &lt;code&gt;widths&lt;/code&gt; parameter to &lt;code&gt;&amp;quot;auto&amp;quot;&lt;/code&gt; that didn&amp;rsquo;t work a 100%. It &lt;em&gt;did&lt;/em&gt; look much better than having all columns in the standard width, though. In the end that was good enough for me.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>Yesterday I had to share data with some internal stakeholders in excel format. Why excel? Well, I guess if you are not a &ldquo;data professional&rdquo;, then that&rsquo;s the easiest format to work with.</p>
<p>So, I started <code>R</code>, read in the dataset, did some data wrangling and then wanted to write the data to a xlsx file. I heard great things about the <code>openxlsx</code> package so I used it for the first time. My initial attempt was using the <code>write.xlsx()</code> function. That certainly did the job but the resulting file didn&rsquo;t look how I like my excel files. I am a fan of a freezed top row with bold and centered column headers.</p>
<p>I digged a bit into the <code>openxlsx</code> documentation and it turned out that the package can do all of this. Great!</p>
<p>Here is the code I used (obviously not exporting the mtcars dataset):</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">openxlsx</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>

<span class="n">header_style</span> <span class="o">&lt;-</span> <span class="nf">createStyle</span><span class="p">(</span><span class="n">halign</span> <span class="o">=</span> <span class="s">&#34;center&#34;</span><span class="p">,</span> <span class="n">textDecoration</span> <span class="o">=</span> <span class="s">&#34;bold&#34;</span><span class="p">)</span>

<span class="n">wb</span> <span class="o">&lt;-</span> <span class="nf">createWorkbook</span><span class="p">()</span>

<span class="nf">addWorksheet</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">)</span>
<span class="nf">writeData</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">mtcars</span><span class="p">,</span> <span class="n">headerStyle</span> <span class="o">=</span> <span class="n">header_style</span><span class="p">)</span>
<span class="nf">freezePane</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">firstRow</span> <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span>
<span class="nf">setColWidths</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="s">&#34;Data&#34;</span><span class="p">,</span> <span class="n">cols</span> <span class="o">=</span> <span class="m">1</span><span class="o">:</span><span class="nf">ncol</span><span class="p">(</span><span class="n">mtcars</span><span class="p">),</span> <span class="n">widths</span> <span class="o">=</span> <span class="s">&#34;auto&#34;</span><span class="p">)</span>
<span class="nf">saveWorkbook</span><span class="p">(</span><span class="n">wb</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&#34;mtcars.xlsx&#34;</span><span class="p">,</span> <span class="n">overwrite</span> <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span>
</code></pre></div><p>The only thing that didn&rsquo;t quite work was adjusting the column width to fit the content. While there is a <code>setColWidths()</code> function where you can set the <code>widths</code> parameter to <code>&quot;auto&quot;</code> that didn&rsquo;t work a 100%. It <em>did</em> look much better than having all columns in the standard width, though. In the end that was good enough for me.</p>
]]></content>
		</item>
		
		<item>
			<title>The right way to check for NAs</title>
			<link>/posts/the-right-way-to-check-for-nas/</link>
			<pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/the-right-way-to-check-for-nas/</guid>
			<description>&lt;p&gt;To check for missing values in &lt;code&gt;R&lt;/code&gt; you might be tempted to use the equality operator &lt;code&gt;==&lt;/code&gt; with your vector on one side and &lt;code&gt;NA&lt;/code&gt; on the other. Don&amp;rsquo;t!&lt;/p&gt;
&lt;p&gt;If you insist, you&amp;rsquo;ll get a useless results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] NA NA NA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead use the &lt;code&gt;is.na()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;is.na&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;</description>
			<content type="html"><![CDATA[<p>To check for missing values in <code>R</code> you might be tempted to use the equality operator <code>==</code> with your vector on one side and <code>NA</code> on the other. Don&rsquo;t!</p>
<p>If you insist, you&rsquo;ll get a useless results.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&lt;-</span> <span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="kc">NA</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
<span class="n">x</span> <span class="o">==</span> <span class="kc">NA</span>
</code></pre></div><pre><code>## [1] NA NA NA
</code></pre><p>Instead use the <code>is.na()</code> function.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">is.na</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>## [1] FALSE  TRUE FALSE
</code></pre>]]></content>
		</item>
		
		<item>
			<title>What does the &lt;&lt;- operator do?</title>
			<link>/posts/what-does-the-operator-do/</link>
			<pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/what-does-the-operator-do/</guid>
			<description>&lt;p&gt;If you&amp;rsquo;ve been using &lt;code&gt;R&lt;/code&gt; for a while, chances are high you came across the &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; operator. On several occasions I&amp;rsquo;ve heard or read people calling &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; the &amp;ldquo;global assignment operator&amp;rdquo;. However, this is wrong. Let me elaborate why.&lt;/p&gt;
&lt;p&gt;First, have a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; truly behaves like a global assignment operator. Every time you call &lt;code&gt;foo()&lt;/code&gt; the variable &lt;code&gt;x&lt;/code&gt; in the global environment is incremented by 1. So far so good.&lt;/p&gt;
&lt;p&gt;If you look at the next example, though, you&amp;rsquo;ll see that &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; always assign to the global environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;99&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bla&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;bla&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 100
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead, it assigns the value to the variable in the enclosing environment, i.e. the environment in which the function was created. It just happens to be that in the first example the enclosing environment was the global environment. In the second example that is not the case and so the variable &lt;code&gt;y&lt;/code&gt; in the global environment is unaffected by calling &lt;code&gt;bar()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d truly want to assign a value to a variable in the global environment you&amp;rsquo;d have to do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;.GlobalEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But, carefully think whether or not you really want to work with global variables (most of the time there are better solutions).&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>If you&rsquo;ve been using <code>R</code> for a while, chances are high you came across the <code>&lt;&lt;-</code> operator. On several occasions I&rsquo;ve heard or read people calling <code>&lt;&lt;-</code> the &ldquo;global assignment operator&rdquo;. However, this is wrong. Let me elaborate why.</p>
<p>First, have a look at this example.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&lt;-</span> <span class="m">0</span>
<span class="n">foo</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">x</span> <span class="o">&lt;&lt;-</span> <span class="n">x</span> <span class="o">+</span> <span class="m">1</span>
  <span class="n">x</span>
<span class="p">}</span>
<span class="nf">foo</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] 1
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">foo</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] 2
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">x</span>
</code></pre></div><pre><code>## [1] 2
</code></pre><p>Here <code>&lt;&lt;-</code> truly behaves like a global assignment operator. Every time you call <code>foo()</code> the variable <code>x</code> in the global environment is incremented by 1. So far so good.</p>
<p>If you look at the next example, though, you&rsquo;ll see that <code>&lt;&lt;-</code> does <em>not</em> always assign to the global environment.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">y</span> <span class="o">&lt;-</span> <span class="m">0</span>
<span class="n">bar</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">y</span> <span class="o">&lt;-</span> <span class="m">99</span>
  <span class="n">bla</span> <span class="o">&lt;-</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">y</span> <span class="o">&lt;&lt;-</span> <span class="n">y</span> <span class="o">+</span> <span class="m">1</span>
  <span class="p">}</span>
  <span class="nf">bla</span><span class="p">()</span>
  <span class="n">y</span>
<span class="p">}</span>

<span class="nf">bar</span><span class="p">()</span>
</code></pre></div><pre><code>## [1] 100
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">y</span>
</code></pre></div><pre><code>## [1] 0
</code></pre><p>Instead, it assigns the value to the variable in the enclosing environment, i.e. the environment in which the function was created. It just happens to be that in the first example the enclosing environment was the global environment. In the second example that is not the case and so the variable <code>y</code> in the global environment is unaffected by calling <code>bar()</code>.</p>
<p>If you&rsquo;d truly want to assign a value to a variable in the global environment you&rsquo;d have to do something like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">.GlobalEnv</span><span class="o">$</span><span class="n">x</span> <span class="o">&lt;-</span> <span class="m">100</span>
</code></pre></div><p>But, carefully think whether or not you really want to work with global variables (most of the time there are better solutions).</p>
]]></content>
		</item>
		
		<item>
			<title>Loading vs. attaching a package</title>
			<link>/posts/loading-vs-attaching-a-package/</link>
			<pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/loading-vs-attaching-a-package/</guid>
			<description>&lt;p&gt;&lt;code&gt;R&lt;/code&gt; users often talk of loading a package when they use &lt;code&gt;library()&lt;/code&gt;. But technical &lt;code&gt;library()&lt;/code&gt; doesn&amp;rsquo;t load the package but attaches it. So what&amp;rsquo;s the difference?&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve ever used the &lt;code&gt;::&lt;/code&gt; operator, e.g. &lt;code&gt;dplyr::filter()&lt;/code&gt;, you have loaded a package. Loading a package does exactly what the name suggests: it loads all functions and datasets of a particular package. However, to access these functions and datasets you will still need to use &lt;code&gt;::&lt;/code&gt; every time you refer to something within the package.&lt;/p&gt;
&lt;p&gt;When you use &lt;code&gt;library()&lt;/code&gt; the package is attached to the search path. You can think of the search path as a queue of (literally) packages, each one filled with functions and datasets. Whenever you use a function without &lt;code&gt;::&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt; looks for a function with that name in the first package. If it doesn&amp;rsquo;t find it, &lt;code&gt;R&lt;/code&gt; continues to look for it in the next package and so on until it finds the function.&lt;/p&gt;
&lt;p&gt;Importantly, calling &lt;code&gt;library(pkg)&lt;/code&gt; will place &lt;code&gt;pkg&lt;/code&gt; at the beginning of the queue. That&amp;rsquo;s why after calling &lt;code&gt;library(dplyr)&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt; will be &lt;code&gt;dplyr::filter()&lt;/code&gt; and not &lt;code&gt;stats::filter()&lt;/code&gt; any longer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# stats::filter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## function (x, filter, method = c(&amp;quot;convolution&amp;quot;, &amp;quot;recursive&amp;quot;), 
##     sides = 2L, circular = FALSE, init = NULL) 
## NULL
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dplyr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# dplyr::filter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## function (.data, ..., .preserve = FALSE) 
## NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This behavior can cause trouble, so if you know there&amp;rsquo;s a function with the same name in multiple packages I&amp;rsquo;d advice you to be explicit and use &lt;code&gt;::&lt;/code&gt; every time you use that function.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p><code>R</code> users often talk of loading a package when they use <code>library()</code>. But technical <code>library()</code> doesn&rsquo;t load the package but attaches it. So what&rsquo;s the difference?</p>
<p>If you&rsquo;ve ever used the <code>::</code> operator, e.g. <code>dplyr::filter()</code>, you have loaded a package. Loading a package does exactly what the name suggests: it loads all functions and datasets of a particular package. However, to access these functions and datasets you will still need to use <code>::</code> every time you refer to something within the package.</p>
<p>When you use <code>library()</code> the package is attached to the search path. You can think of the search path as a queue of (literally) packages, each one filled with functions and datasets. Whenever you use a function without <code>::</code>, <code>R</code> looks for a function with that name in the first package. If it doesn&rsquo;t find it, <code>R</code> continues to look for it in the next package and so on until it finds the function.</p>
<p>Importantly, calling <code>library(pkg)</code> will place <code>pkg</code> at the beginning of the queue. That&rsquo;s why after calling <code>library(dplyr)</code>, <code>filter()</code> will be <code>dplyr::filter()</code> and not <code>stats::filter()</code> any longer.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">args</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span> <span class="c1"># stats::filter</span>
</code></pre></div><pre><code>## function (x, filter, method = c(&quot;convolution&quot;, &quot;recursive&quot;), 
##     sides = 2L, circular = FALSE, init = NULL) 
## NULL
</code></pre><div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span>
<span class="nf">args</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span> <span class="c1"># dplyr::filter</span>
</code></pre></div><pre><code>## function (.data, ..., .preserve = FALSE) 
## NULL
</code></pre><p>This behavior can cause trouble, so if you know there&rsquo;s a function with the same name in multiple packages I&rsquo;d advice you to be explicit and use <code>::</code> every time you use that function.</p>
]]></content>
		</item>
		
		<item>
			<title>How to add a regression line to a ggplot?</title>
			<link>/posts/how-to-add-a-regression-line-to-a-ggplot/</link>
			<pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/how-to-add-a-regression-line-to-a-ggplot/</guid>
			<description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggplot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>
</code></pre></div><h3 id="step-1">Step 1</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">p</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
<span class="n">p</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="step-2">Step 2</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">p</span> <span class="o">+</span> <span class="nf">geom_smooth</span><span class="p">()</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="step-3">Step 3</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="n">p</span> <span class="o">+</span> <span class="nf">geom_smooth</span><span class="p">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">&#34;lm&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="putting-it-all-together">Putting it all together</h3>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">hp</span><span class="p">,</span> <span class="n">wt</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span> <span class="o">+</span>
  <span class="nf">geom_smooth</span><span class="p">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">&#34;lm&#34;</span><span class="p">)</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Adjusting only the upper or lower axis limit using ggplot2</title>
			<link>/posts/adjusting-only-the-upper-or-lower-axis-limit-using-ggplot2/</link>
			<pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/adjusting-only-the-upper-or-lower-axis-limit-using-ggplot2/</guid>
			<description>&lt;p&gt;If you want to change only the lower or upper bound of your plot axis pass &lt;code&gt;NA&lt;/code&gt; for the value you don&amp;rsquo;t want to set inside either &lt;code&gt;xlim()&lt;/code&gt; or &lt;code&gt;ylim()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggplot2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patchwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;theme_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ggcharts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;theme_hermit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;XY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ggplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mtcars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cyl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;geom_boxplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#D6DDE1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;steelblue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ylim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ylim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>If you want to change only the lower or upper bound of your plot axis pass <code>NA</code> for the value you don&rsquo;t want to set inside either <code>xlim()</code> or <code>ylim()</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">patchwork</span><span class="p">)</span>
<span class="nf">theme_set</span><span class="p">(</span><span class="n">ggcharts</span><span class="o">::</span><span class="nf">theme_hermit</span><span class="p">(</span><span class="n">grid</span> <span class="o">=</span> <span class="s">&#34;XY&#34;</span><span class="p">))</span>
<span class="nf">data</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span>

<span class="n">p1</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="nf">factor</span><span class="p">(</span><span class="n">cyl</span><span class="p">),</span> <span class="n">hp</span><span class="p">))</span> <span class="o">+</span>
  <span class="nf">geom_boxplot</span><span class="p">(</span><span class="n">color</span> <span class="o">=</span> <span class="s">&#34;#D6DDE1&#34;</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="s">&#34;steelblue&#34;</span><span class="p">)</span>
<span class="n">p2</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">+</span> <span class="nf">ylim</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="kc">NA</span><span class="p">)</span>
<span class="n">p3</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">+</span> <span class="nf">ylim</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span> <span class="m">500</span><span class="p">)</span>

<span class="n">p1</span> <span class="o">|</span> <span class="n">p2</span> <span class="o">|</span> <span class="n">p3</span>
</code></pre></div><p><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>When things go wrong: how to amend a git commit?</title>
			<link>/posts/when-things-go-wrong-how-to-amend-a-git-commit/</link>
			<pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>/posts/when-things-go-wrong-how-to-amend-a-git-commit/</guid>
			<description>&lt;p&gt;While working on a data science project did you ever &lt;code&gt;git commit&lt;/code&gt; a bunch of &lt;code&gt;.R&lt;/code&gt; files only to realize a few seconds later that you forget to include something? I certainly did. Today alone 3 times.&lt;/p&gt;
&lt;p&gt;What can you do? The obvious solution is to make a second commit. But that&amp;rsquo;s a bad one. Instead do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add &amp;lt;forgotten.file&amp;gt;
git commit --amend --no-edit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace &lt;code&gt;&amp;lt;forgotten.file&amp;gt;&lt;/code&gt; with the actual file name, e.g. &lt;code&gt;analysis.R&lt;/code&gt;. This will add the file to your previous commit while keeping the commit message. If you want to change the commit message remove the &lt;code&gt;--no-edit&lt;/code&gt; argument. When you do so a text editor will pop up where you can change the commit message.&lt;/p&gt;
&lt;p&gt;Another scenario: you committed all files but forgot to make a change in one file. In that case simply edit the respective file and run the exact same two commands as above. Make sure to replace &lt;code&gt;&amp;lt;forgotten.file&amp;gt;&lt;/code&gt; with the name of the file you just edited.&lt;/p&gt;
&lt;p&gt;Finally to push the commit to GitHub run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push -f origin &amp;lt;your branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;your branch&amp;gt;&lt;/code&gt; is the branch you are currently working in, e.g. &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A note to RStudio users: you need to run the &lt;code&gt;git&lt;/code&gt; commands from the terminal instead of using the &lt;code&gt;git&lt;/code&gt; GUI.&lt;/p&gt;
</description>
			<content type="html"><![CDATA[<p>While working on a data science project did you ever <code>git commit</code> a bunch of <code>.R</code> files only to realize a few seconds later that you forget to include something? I certainly did. Today alone 3 times.</p>
<p>What can you do? The obvious solution is to make a second commit. But that&rsquo;s a bad one. Instead do the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git add &lt;forgotten.file&gt;
git commit --amend --no-edit
</code></pre></div><p>Replace <code>&lt;forgotten.file&gt;</code> with the actual file name, e.g. <code>analysis.R</code>. This will add the file to your previous commit while keeping the commit message. If you want to change the commit message remove the <code>--no-edit</code> argument. When you do so a text editor will pop up where you can change the commit message.</p>
<p>Another scenario: you committed all files but forgot to make a change in one file. In that case simply edit the respective file and run the exact same two commands as above. Make sure to replace <code>&lt;forgotten.file&gt;</code> with the name of the file you just edited.</p>
<p>Finally to push the commit to GitHub run</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git push -f origin &lt;your branch&gt;
</code></pre></div><p>where <code>&lt;your branch&gt;</code> is the branch you are currently working in, e.g. <code>master</code>.</p>
<p>A note to RStudio users: you need to run the <code>git</code> commands from the terminal instead of using the <code>git</code> GUI.</p>
]]></content>
		</item>
		
	</channel>
</rss>
