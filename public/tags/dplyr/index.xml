<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dplyr on Thomas’ adventuRe</title>
    <link>/tags/dplyr/</link>
    <description>Recent content in dplyr on Thomas’ adventuRe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 11 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calculating change from baseline in R</title>
      <link>/posts/calculating-change-from-baseline-in-r/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/calculating-change-from-baseline-in-r/</guid>
      <description>As a statistical programmer working on clinical trials data I frequently have to calculate change from baseline. In clinical trials baseline is typically defined as the last measurement prior to a clinical trial subject receiving any study drug. Change from baseline is frequently calculated for laboratory measurements, e.g. hemoglobin concentration in blood.
SAS is still the standard used to program datasets in the pharmaceutical industry but R is catching up. Recently, I derived change from baseline for the first time in R.</description>
    </item>
    
    <item>
      <title>Streamline your dplyr chains with count()</title>
      <link>/posts/dplyr-count/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/dplyr-count/</guid>
      <description>If you frequently use chains like this
data %&amp;gt;%group_by(var1, var2) %&amp;gt;%summarise(n = n())consider using
count(data, var1, var2)instead. It produces the same output, you need to type less and the code is more expressive.
By default, the column containing the count will be named n. Want to change that? Simply set the name parameter of count(), e.g.
data(iris)dplyr::count(iris, Species, name = &amp;#34;n_flowers&amp;#34;)## # A tibble: 3 x 2## Species n_flowers## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;## 1 setosa 50## 2 versicolor 50## 3 virginica 50</description>
    </item>
    
  </channel>
</rss>