<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 on Thomas’ adventuRe</title>
    <link>/tags/ggplot2/</link>
    <description>Recent content in ggplot2 on Thomas’ adventuRe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 14 Jun 2020 18:50:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>{mdthemes} is on CRAN: markdown powered themes for {ggplot2}</title>
      <link>/posts/mdthemes-is-on-cran-markdown-powered-themes-for-ggplot2/</link>
      <pubDate>Sun, 14 Jun 2020 18:50:00 +0000</pubDate>
      
      <guid>/posts/mdthemes-is-on-cran-markdown-powered-themes-for-ggplot2/</guid>
      <description>I&amp;rsquo;m very pleased to announce that {mdthemes}—my second (public) R package—is now available from CRAN. {mdthemes} adds support for rendering text as markdown to the themes from {ggplot2}, {ggthemes}, {hrbrthemes}, {tvthemes} and {cowplot}. It contains 55 themes in total. All themes start with md_ followed by the name of the original theme, e.g. md_theme_bw().
I&amp;rsquo;ve been meaning to put this package on CRAN for quite some time. However, before submitting I had to wait until {ggtext}—which does all the hard work for {mdthemes}—was available from CRAN.</description>
    </item>
    
    <item>
      <title>Enhance your {ggplot2} data visualizations with {ggtext}</title>
      <link>/posts/enhance-ggplot2-with-ggtext/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/enhance-ggplot2-with-ggtext/</guid>
      <description>I am super exciting to share with you my recent &amp;ldquo;discovery&amp;rdquo; of the {ggtext} R package.
I had looked for a solution to color individual words in the title of a {ggplot2} data visualization and {ggtext} provided me with a great solution for doing just that (and more).
So, how does it work? Have a look at this example:
library(ggplot2)library(dplyr)data(biomedicalrevenue, package = &amp;#34;ggcharts&amp;#34;)plot &amp;lt;- biomedicalrevenue %&amp;gt;%filter(company %in% c(&amp;#34;Roche&amp;#34;, &amp;#34;Novartis&amp;#34;)) %&amp;gt;%ggplot(aes(year, revenue, color = company)) +geom_line(size = 1.</description>
    </item>
    
    <item>
      <title>Analyzing the ggcharts CRAN Downloads. Part 2: Data Visualization</title>
      <link>/posts/ggcharts-cran-downloads-part-2/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-cran-downloads-part-2/</guid>
      <description>Introduction In part 1 of this post I described how I got data about the ggcharts CRAN downloads. In this follow-up post I will walk you through how to turn this data into an informative visualization using ggplot2 and patchwork.
library(ggplot2)library(patchwork)Daily Downloads The first plot will show the daily downloads over time. I will use a line chart for that purpose. Remember from part 1 that the daily_downloads dataset contains the aggregated number of downloads per day.</description>
    </item>
    
    <item>
      <title>Adding labels to a ggplot2 bar chart</title>
      <link>/posts/labels-ggplot2-bar-chart/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/labels-ggplot2-bar-chart/</guid>
      <description>I often see bar charts where the bars are directly labeled with the value they represent. In this post I will walk you through how you can create such labeled bar charts using ggplot2.
The data I will use comes from the 2019 Stackoverflow Developer Survey. To make creating the plot easier I will use the bar_chart() function from my ggcharts package which outputs a ggplot that can be customized further using any ggplot2 function.</description>
    </item>
    
    <item>
      <title>Transform a ggplot2 axis to a percentage scale</title>
      <link>/posts/ggplot2-percentage-scale/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggplot2-percentage-scale/</guid>
      <description>When plotting a variable whose unit of measure is percent it&amp;rsquo;s best practice to have the axis labels contain the percentage sign (%). This makes it obvious to anyone looking at the data visualization that they are dealing with percentages.
To illustrate this let&amp;rsquo;s create an example dataset.
library(dplyr)data(mtcars)cyl &amp;lt;- mtcars %&amp;gt;%count(cyl) %&amp;gt;%mutate(pct = n / sum(n) * 100) %&amp;gt;%print()## # A tibble: 3 x 3## cyl n pct## &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;## 1 4 11 34.</description>
    </item>
    
    <item>
      <title>Changing things up with ggplot2 themes</title>
      <link>/posts/changing-things-up-with-ggplot2-themes/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/changing-things-up-with-ggplot2-themes/</guid>
      <description>Are you tired of adding your favorite ggplot2 theme to every data visualization you create in R? Then I have a solution for you!
Before you start to create any plots call the theme_set() function with your favorite theme as first argument, e.g.
library(ggplot2)theme_set(theme_minimal())That will ensure all plots you subsequently create will use this theme unless you add a different one.
data(&amp;#34;mtcars&amp;#34;)ggplot(mtcars, aes(hp, mpg, color = wt)) +geom_point()Very handy for lazy people like me.</description>
    </item>
    
    <item>
      <title>Turning your ggplot2 code into a function</title>
      <link>/posts/turning-your-ggplot2-code-into-a-function/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/turning-your-ggplot2-code-into-a-function/</guid>
      <description>If you find yourself repeatedly writing the same ggplot2 code to create a data visualization in R, then it&amp;rsquo;s time to put your code into a function.
You may start out with an implementation similar to this one.
library(ggplot2)theme_set(ggcharts::theme_hermit(grid = &amp;#34;XY&amp;#34;))data(&amp;#34;mtcars&amp;#34;)scatter_plot &amp;lt;- function(data, x, y) {ggplot(data, aes(x, y)) +geom_point(color = &amp;#34;yellow&amp;#34;)}That won&amp;rsquo;t work though.
scatter_plot(mtcars, hp, mpg)## Error in FUN(X[[i]], ...): object &#39;hp&#39; not foundIf you call this function, R will look for a variable called hp rather than looking for a column with that name inside the data frame you passed as the first argument.</description>
    </item>
    
    <item>
      <title>How to add a regression line to a ggplot?</title>
      <link>/posts/how-to-add-a-regression-line-to-a-ggplot/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-to-add-a-regression-line-to-a-ggplot/</guid>
      <description>library(ggplot2)data(mtcars)Step 1 p &amp;lt;- ggplot(mtcars, aes(hp, wt)) +geom_point()pStep 2 p + geom_smooth()Step 3 p + geom_smooth(method = &amp;#34;lm&amp;#34;)Putting it all together ggplot(mtcars, aes(hp, wt)) +geom_point() +geom_smooth(method = &amp;#34;lm&amp;#34;)</description>
    </item>
    
    <item>
      <title>Adjusting only the upper or lower axis limit using ggplot2</title>
      <link>/posts/adjusting-only-the-upper-or-lower-axis-limit-using-ggplot2/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/adjusting-only-the-upper-or-lower-axis-limit-using-ggplot2/</guid>
      <description>If you want to change only the lower or upper bound of your plot axis pass NA for the value you don&amp;rsquo;t want to set inside either xlim() or ylim().
library(ggplot2)library(patchwork)theme_set(ggcharts::theme_hermit(grid = &amp;#34;XY&amp;#34;))data(mtcars)p1 &amp;lt;- ggplot(mtcars, aes(factor(cyl), hp)) +geom_boxplot(color = &amp;#34;#D6DDE1&amp;#34;, fill = &amp;#34;steelblue&amp;#34;)p2 &amp;lt;- p1 + ylim(0, NA)p3 &amp;lt;- p1 + ylim(NA, 500)p1 | p2 | p3</description>
    </item>
    
  </channel>
</rss>