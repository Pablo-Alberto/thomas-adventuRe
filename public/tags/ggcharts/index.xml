<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggcharts on Thomas’ adventuRe</title>
    <link>/tags/ggcharts/</link>
    <description>Recent content in ggcharts on Thomas’ adventuRe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/ggcharts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>{ggcharts 0.2.0} is on CRAN</title>
      <link>/posts/ggcharts-0-2-0-is-on-cran/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-0-2-0-is-on-cran/</guid>
      <description>Introduction A week ago the second release of my {ggcharts} package was published on CRAN. {ggcharts} aims to get you to your desired plot faster. It provides a high-level interface for creating common plots using {ggplot2} and does the heavy lifting for you. The resulting plots are ggplot objects so you can further tweak them using any {ggplot2} function.
Major new feature: themes The major focus of version 0.2.0 was adding themes to the package.</description>
    </item>
    
    <item>
      <title>Analyzing the ggcharts CRAN Downloads. Part 2: Data Visualization</title>
      <link>/posts/ggcharts-cran-downloads-part-2/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggcharts-cran-downloads-part-2/</guid>
      <description>Introduction In part 1 of this post I described how I got data about the ggcharts CRAN downloads. In this follow-up post I will walk you through how to turn this data into an informative visualization using ggplot2 and patchwork.
library(ggplot2)library(patchwork)Daily Downloads The first plot will show the daily downloads over time. I will use a line chart for that purpose. Remember from part 1 that the daily_downloads dataset contains the aggregated number of downloads per day.</description>
    </item>
    
    <item>
      <title>Adding labels to a ggplot2 bar chart</title>
      <link>/posts/labels-ggplot2-bar-chart/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/labels-ggplot2-bar-chart/</guid>
      <description>I often see bar charts where the bars are directly labeled with the value they represent. In this post I will walk you through how you can create such labeled bar charts using ggplot2.
The data I will use comes from the 2019 Stackoverflow Developer Survey. To make creating the plot easier I will use the bar_chart() function from my ggcharts package which outputs a ggplot that can be customized further using any ggplot2 function.</description>
    </item>
    
    <item>
      <title>Transform a ggplot2 axis to a percentage scale</title>
      <link>/posts/ggplot2-percentage-scale/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ggplot2-percentage-scale/</guid>
      <description>When plotting a variable whose unit of measure is percent it&amp;rsquo;s best practice to have the axis labels contain the percentage sign (%). This makes it obvious to anyone looking at the data visualization that they are dealing with percentages.
To illustrate this let&amp;rsquo;s create an example dataset.
library(dplyr)data(mtcars)cyl &amp;lt;- mtcars %&amp;gt;%count(cyl) %&amp;gt;%mutate(pct = n / sum(n) * 100) %&amp;gt;%print()## # A tibble: 3 x 3## cyl n pct## &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;## 1 4 11 34.</description>
    </item>
    
    <item>
      <title>Creating dumbbell charts with the ggcharts R package</title>
      <link>/posts/dumbbel-charts-with-ggcharts/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/dumbbel-charts-with-ggcharts/</guid>
      <description>library(ggcharts)library(dplyr)library(gapminder)data(gapminder)I am very pleased to announce that my ggcharts package has a new feature: dumbbell_chart().
To showcase this new function I will use the gapminder dataset which contains countries&amp;rsquo; population counts from 1952 to 2017. This dataset is in long format. In order for dumbbell_chart() to work properly the data has to be in wide format, though. So, first a bit of data wrangling.
gapminder_wide &amp;lt;- gapminder %&amp;gt;%mutate(pop = pop / 1e6) %&amp;gt;%filter(year %in% c(1952, 2007)) %&amp;gt;%tidyr::pivot_wider(id_cols = country,names_from = year,values_from = pop,names_prefix = &amp;#34;pop_&amp;#34;)gapminder_wide## # A tibble: 142 x 3## country pop_1952 pop_2007## &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;## 1 Afghanistan 8.</description>
    </item>
    
  </channel>
</rss>